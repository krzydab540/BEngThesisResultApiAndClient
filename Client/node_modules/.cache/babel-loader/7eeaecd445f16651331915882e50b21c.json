{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Page = void 0;\n\nconst EventEmitter_js_1 = require(\"./EventEmitter.js\");\n\nconst Connection_js_1 = require(\"./Connection.js\");\n\nconst Dialog_js_1 = require(\"./Dialog.js\");\n\nconst EmulationManager_js_1 = require(\"./EmulationManager.js\");\n\nconst FrameManager_js_1 = require(\"./FrameManager.js\");\n\nconst Input_js_1 = require(\"./Input.js\");\n\nconst Tracing_js_1 = require(\"./Tracing.js\");\n\nconst assert_js_1 = require(\"./assert.js\");\n\nconst helper_js_1 = require(\"./helper.js\");\n\nconst Coverage_js_1 = require(\"./Coverage.js\");\n\nconst WebWorker_js_1 = require(\"./WebWorker.js\");\n\nconst JSHandle_js_1 = require(\"./JSHandle.js\");\n\nconst NetworkManager_js_1 = require(\"./NetworkManager.js\");\n\nconst Accessibility_js_1 = require(\"./Accessibility.js\");\n\nconst TimeoutSettings_js_1 = require(\"./TimeoutSettings.js\");\n\nconst FileChooser_js_1 = require(\"./FileChooser.js\");\n\nconst ConsoleMessage_js_1 = require(\"./ConsoleMessage.js\");\n\nconst PDFOptions_js_1 = require(\"./PDFOptions.js\");\n\nconst environment_js_1 = require(\"../environment.js\");\n\nclass ScreenshotTaskQueue {\n  constructor() {\n    this._chain = Promise.resolve(undefined);\n  }\n\n  postTask(task) {\n    const result = this._chain.then(task);\n\n    this._chain = result.catch(() => {});\n    return result;\n  }\n\n}\n/**\n * Page provides methods to interact with a single tab or\n * {@link https://developer.chrome.com/extensions/background_pages | extension background page} in Chromium.\n *\n * @remarks\n *\n * One Browser instance might have multiple Page instances.\n *\n * @example\n * This example creates a page, navigates it to a URL, and then * saves a screenshot:\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://example.com');\n *   await page.screenshot({path: 'screenshot.png'});\n *   await browser.close();\n * })();\n * ```\n *\n * The Page class extends from Puppeteer's {@link EventEmitter} class and will\n * emit various events which are documented in the {@link PageEmittedEvents} enum.\n *\n * @example\n * This example logs a message for a single page `load` event:\n * ```js\n * page.once('load', () => console.log('Page loaded!'));\n * ```\n *\n * To unsubscribe from events use the `off` method:\n *\n * ```js\n * function logRequest(interceptedRequest) {\n *   console.log('A request was made:', interceptedRequest.url());\n * }\n * page.on('request', logRequest);\n * // Sometime later...\n * page.off('request', logRequest);\n * ```\n * @public\n */\n\n\nclass Page extends EventEmitter_js_1.EventEmitter {\n  /**\n   * @internal\n   */\n  constructor(client, target, ignoreHTTPSErrors) {\n    super();\n    this._closed = false;\n    this._timeoutSettings = new TimeoutSettings_js_1.TimeoutSettings();\n    this._pageBindings = new Map();\n    this._javascriptEnabled = true;\n    this._workers = new Map(); // TODO: improve this typedef - it's a function that takes a file chooser or\n    // something?\n\n    this._fileChooserInterceptors = new Set();\n    this._client = client;\n    this._target = target;\n    this._keyboard = new Input_js_1.Keyboard(client);\n    this._mouse = new Input_js_1.Mouse(client, this._keyboard);\n    this._touchscreen = new Input_js_1.Touchscreen(client, this._keyboard);\n    this._accessibility = new Accessibility_js_1.Accessibility(client);\n    this._frameManager = new FrameManager_js_1.FrameManager(client, this, ignoreHTTPSErrors, this._timeoutSettings);\n    this._emulationManager = new EmulationManager_js_1.EmulationManager(client);\n    this._tracing = new Tracing_js_1.Tracing(client);\n    this._coverage = new Coverage_js_1.Coverage(client);\n    this._screenshotTaskQueue = new ScreenshotTaskQueue();\n    this._viewport = null;\n    client.on('Target.attachedToTarget', event => {\n      if (event.targetInfo.type !== 'worker') {\n        // If we don't detach from service workers, they will never die.\n        client.send('Target.detachFromTarget', {\n          sessionId: event.sessionId\n        }).catch(helper_js_1.debugError);\n        return;\n      }\n\n      const session = Connection_js_1.Connection.fromSession(client).session(event.sessionId);\n      const worker = new WebWorker_js_1.WebWorker(session, event.targetInfo.url, this._addConsoleMessage.bind(this), this._handleException.bind(this));\n\n      this._workers.set(event.sessionId, worker);\n\n      this.emit(\"workercreated\"\n      /* WorkerCreated */\n      , worker);\n    });\n    client.on('Target.detachedFromTarget', event => {\n      const worker = this._workers.get(event.sessionId);\n\n      if (!worker) return;\n      this.emit(\"workerdestroyed\"\n      /* WorkerDestroyed */\n      , worker);\n\n      this._workers.delete(event.sessionId);\n    });\n\n    this._frameManager.on(FrameManager_js_1.FrameManagerEmittedEvents.FrameAttached, event => this.emit(\"frameattached\"\n    /* FrameAttached */\n    , event));\n\n    this._frameManager.on(FrameManager_js_1.FrameManagerEmittedEvents.FrameDetached, event => this.emit(\"framedetached\"\n    /* FrameDetached */\n    , event));\n\n    this._frameManager.on(FrameManager_js_1.FrameManagerEmittedEvents.FrameNavigated, event => this.emit(\"framenavigated\"\n    /* FrameNavigated */\n    , event));\n\n    const networkManager = this._frameManager.networkManager();\n\n    networkManager.on(NetworkManager_js_1.NetworkManagerEmittedEvents.Request, event => this.emit(\"request\"\n    /* Request */\n    , event));\n    networkManager.on(NetworkManager_js_1.NetworkManagerEmittedEvents.Response, event => this.emit(\"response\"\n    /* Response */\n    , event));\n    networkManager.on(NetworkManager_js_1.NetworkManagerEmittedEvents.RequestFailed, event => this.emit(\"requestfailed\"\n    /* RequestFailed */\n    , event));\n    networkManager.on(NetworkManager_js_1.NetworkManagerEmittedEvents.RequestFinished, event => this.emit(\"requestfinished\"\n    /* RequestFinished */\n    , event));\n    this._fileChooserInterceptors = new Set();\n    client.on('Page.domContentEventFired', () => this.emit(\"domcontentloaded\"\n    /* DOMContentLoaded */\n    ));\n    client.on('Page.loadEventFired', () => this.emit(\"load\"\n    /* Load */\n    ));\n    client.on('Runtime.consoleAPICalled', event => this._onConsoleAPI(event));\n    client.on('Runtime.bindingCalled', event => this._onBindingCalled(event));\n    client.on('Page.javascriptDialogOpening', event => this._onDialog(event));\n    client.on('Runtime.exceptionThrown', exception => this._handleException(exception.exceptionDetails));\n    client.on('Inspector.targetCrashed', () => this._onTargetCrashed());\n    client.on('Performance.metrics', event => this._emitMetrics(event));\n    client.on('Log.entryAdded', event => this._onLogEntryAdded(event));\n    client.on('Page.fileChooserOpened', event => this._onFileChooser(event));\n\n    this._target._isClosedPromise.then(() => {\n      this.emit(\"close\"\n      /* Close */\n      );\n      this._closed = true;\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  static async create(client, target, ignoreHTTPSErrors, defaultViewport) {\n    const page = new Page(client, target, ignoreHTTPSErrors);\n    await page._initialize();\n    if (defaultViewport) await page.setViewport(defaultViewport);\n    return page;\n  }\n\n  async _initialize() {\n    await Promise.all([this._frameManager.initialize(), this._client.send('Target.setAutoAttach', {\n      autoAttach: true,\n      waitForDebuggerOnStart: false,\n      flatten: true\n    }), this._client.send('Performance.enable'), this._client.send('Log.enable')]);\n  }\n\n  async _onFileChooser(event) {\n    if (!this._fileChooserInterceptors.size) return;\n\n    const frame = this._frameManager.frame(event.frameId);\n\n    const context = await frame.executionContext();\n    const element = await context._adoptBackendNodeId(event.backendNodeId);\n    const interceptors = Array.from(this._fileChooserInterceptors);\n\n    this._fileChooserInterceptors.clear();\n\n    const fileChooser = new FileChooser_js_1.FileChooser(element, event);\n\n    for (const interceptor of interceptors) interceptor.call(null, fileChooser);\n  }\n  /**\n   * @returns `true` if the page has JavaScript enabled, `false` otherwise.\n   */\n\n\n  isJavaScriptEnabled() {\n    return this._javascriptEnabled;\n  }\n  /**\n   * @param options - Optional waiting parameters\n   * @returns Resolves after a page requests a file picker.\n   */\n\n\n  async waitForFileChooser(options = {}) {\n    if (!this._fileChooserInterceptors.size) await this._client.send('Page.setInterceptFileChooserDialog', {\n      enabled: true\n    });\n    const {\n      timeout = this._timeoutSettings.timeout()\n    } = options;\n    let callback;\n    const promise = new Promise(x => callback = x);\n\n    this._fileChooserInterceptors.add(callback);\n\n    return helper_js_1.helper.waitWithTimeout(promise, 'waiting for file chooser', timeout).catch(error => {\n      this._fileChooserInterceptors.delete(callback);\n\n      throw error;\n    });\n  }\n  /**\n   * Sets the page's geolocation.\n   *\n   * @remarks\n   * Consider using {@link BrowserContext.overridePermissions} to grant\n   * permissions for the page to read its geolocation.\n   *\n   * @example\n   * ```js\n   * await page.setGeolocation({latitude: 59.95, longitude: 30.31667});\n   * ```\n   */\n\n\n  async setGeolocation(options) {\n    const {\n      longitude,\n      latitude,\n      accuracy = 0\n    } = options;\n    if (longitude < -180 || longitude > 180) throw new Error(`Invalid longitude \"${longitude}\": precondition -180 <= LONGITUDE <= 180 failed.`);\n    if (latitude < -90 || latitude > 90) throw new Error(`Invalid latitude \"${latitude}\": precondition -90 <= LATITUDE <= 90 failed.`);\n    if (accuracy < 0) throw new Error(`Invalid accuracy \"${accuracy}\": precondition 0 <= ACCURACY failed.`);\n    await this._client.send('Emulation.setGeolocationOverride', {\n      longitude,\n      latitude,\n      accuracy\n    });\n  }\n  /**\n   * @returns A target this page was created from.\n   */\n\n\n  target() {\n    return this._target;\n  }\n  /**\n   * @returns The browser this page belongs to.\n   */\n\n\n  browser() {\n    return this._target.browser();\n  }\n  /**\n   * @returns The browser context that the page belongs to\n   */\n\n\n  browserContext() {\n    return this._target.browserContext();\n  }\n\n  _onTargetCrashed() {\n    this.emit('error', new Error('Page crashed!'));\n  }\n\n  _onLogEntryAdded(event) {\n    const {\n      level,\n      text,\n      args,\n      source,\n      url,\n      lineNumber\n    } = event.entry;\n    if (args) args.map(arg => helper_js_1.helper.releaseObject(this._client, arg));\n    if (source !== 'worker') this.emit(\"console\"\n    /* Console */\n    , new ConsoleMessage_js_1.ConsoleMessage(level, text, [], [{\n      url,\n      lineNumber\n    }]));\n  }\n  /**\n   * @returns The page's main frame.\n   */\n\n\n  mainFrame() {\n    return this._frameManager.mainFrame();\n  }\n\n  get keyboard() {\n    return this._keyboard;\n  }\n\n  get touchscreen() {\n    return this._touchscreen;\n  }\n\n  get coverage() {\n    return this._coverage;\n  }\n\n  get tracing() {\n    return this._tracing;\n  }\n\n  get accessibility() {\n    return this._accessibility;\n  }\n  /**\n   * @returns An array of all frames attached to the page.\n   */\n\n\n  frames() {\n    return this._frameManager.frames();\n  }\n  /**\n   * @returns all of the dedicated\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API | WebWorkers}\n   * associated with the page.\n   */\n\n\n  workers() {\n    return Array.from(this._workers.values());\n  }\n  /**\n   * @param value - Whether to enable request interception.\n   *\n   * @remarks\n   * Activating request interception enables {@link HTTPRequest.abort},\n   * {@link HTTPRequest.continue} and {@link HTTPRequest.respond} methods.  This\n   * provides the capability to modify network requests that are made by a page.\n   *\n   * Once request interception is enabled, every request will stall unless it's\n   * continued, responded or aborted.\n   *\n   * **NOTE** Enabling request interception disables page caching.\n   *\n   * @example\n   * An example of a naïve request interceptor that aborts all image requests:\n   * ```js\n   * const puppeteer = require('puppeteer');\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   const page = await browser.newPage();\n   *   await page.setRequestInterception(true);\n   *   page.on('request', interceptedRequest => {\n   *     if (interceptedRequest.url().endsWith('.png') ||\n   *         interceptedRequest.url().endsWith('.jpg'))\n   *       interceptedRequest.abort();\n   *     else\n   *       interceptedRequest.continue();\n   *     });\n   *   await page.goto('https://example.com');\n   *   await browser.close();\n   * })();\n   * ```\n   */\n\n\n  async setRequestInterception(value) {\n    return this._frameManager.networkManager().setRequestInterception(value);\n  }\n  /**\n   * @param enabled - When `true`, enables offline mode for the page.\n   */\n\n\n  setOfflineMode(enabled) {\n    return this._frameManager.networkManager().setOfflineMode(enabled);\n  }\n  /**\n   * @param timeout - Maximum navigation time in milliseconds.\n   */\n\n\n  setDefaultNavigationTimeout(timeout) {\n    this._timeoutSettings.setDefaultNavigationTimeout(timeout);\n  }\n  /**\n   * @param timeout - Maximum time in milliseconds.\n   */\n\n\n  setDefaultTimeout(timeout) {\n    this._timeoutSettings.setDefaultTimeout(timeout);\n  }\n  /**\n   * Runs `document.querySelector` within the page. If no element matches the\n   * selector, the return value resolves to `null`.\n   *\n   * @remarks\n   * Shortcut for {@link Frame.$ | Page.mainFrame().$(selector) }.\n   *\n   * @param selector - A\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n   * to query page for.\n   */\n\n\n  async $(selector) {\n    return this.mainFrame().$(selector);\n  }\n  /**\n   * @remarks\n   *\n   * The only difference between {@link Page.evaluate | page.evaluate} and\n   * `page.evaluateHandle` is that `evaluateHandle` will return the value\n   * wrapped in an in-page object.\n   *\n   * If the function passed to `page.evaluteHandle` returns a Promise, the\n   * function will wait for the promise to resolve and return its value.\n   *\n   * You can pass a string instead of a function (although functions are\n   * recommended as they are easier to debug and use with TypeScript):\n   *\n   * @example\n   * ```\n   * const aHandle = await page.evaluateHandle('document')\n   * ```\n   *\n   * @example\n   * {@link JSHandle} instances can be passed as arguments to the `pageFunction`:\n   * ```\n   * const aHandle = await page.evaluateHandle(() => document.body);\n   * const resultHandle = await page.evaluateHandle(body => body.innerHTML, aHandle);\n   * console.log(await resultHandle.jsonValue());\n   * await resultHandle.dispose();\n   * ```\n   *\n   * Most of the time this function returns a {@link JSHandle},\n   * but if `pageFunction` returns a reference to an element,\n   * you instead get an {@link ElementHandle} back:\n   *\n   * @example\n   * ```\n   * const button = await page.evaluateHandle(() => document.querySelector('button'));\n   * // can call `click` because `button` is an `ElementHandle`\n   * await button.click();\n   * ```\n   *\n   * The TypeScript definitions assume that `evaluateHandle` returns\n   *  a `JSHandle`, but if you know it's going to return an\n   * `ElementHandle`, pass it as the generic argument:\n   *\n   * ```\n   * const button = await page.evaluateHandle<ElementHandle>(...);\n   * ```\n   *\n   * @param pageFunction - a function that is run within the page\n   * @param args - arguments to be passed to the pageFunction\n   */\n\n\n  async evaluateHandle(pageFunction, ...args) {\n    const context = await this.mainFrame().executionContext();\n    return context.evaluateHandle(pageFunction, ...args);\n  }\n  /**\n   * This method iterates the JavaScript heap and finds all objects with the\n   * given prototype.\n   *\n   * @remarks\n   *\n   * @example\n   *\n   * ```js\n   * // Create a Map object\n   * await page.evaluate(() => window.map = new Map());\n   * // Get a handle to the Map object prototype\n   * const mapPrototype = await page.evaluateHandle(() => Map.prototype);\n   * // Query all map instances into an array\n   * const mapInstances = await page.queryObjects(mapPrototype);\n   * // Count amount of map objects in heap\n   * const count = await page.evaluate(maps => maps.length, mapInstances);\n   * await mapInstances.dispose();\n   * await mapPrototype.dispose();\n   * ```\n   * @param prototypeHandle - a handle to the object prototype.\n   */\n\n\n  async queryObjects(prototypeHandle) {\n    const context = await this.mainFrame().executionContext();\n    return context.queryObjects(prototypeHandle);\n  }\n  /**\n   * This method runs `document.querySelector` within the page and passes the\n   * result as the first argument to the `pageFunction`.\n   *\n   * @remarks\n   *\n   * If no element is found matching `selector`, the method will throw an error.\n   *\n   * If `pageFunction` returns a promise `$eval` will wait for the promise to\n   * resolve and then return its value.\n   *\n   * @example\n   *\n   * ```\n   * const searchValue = await page.$eval('#search', el => el.value);\n   * const preloadHref = await page.$eval('link[rel=preload]', el => el.href);\n   * const html = await page.$eval('.main-container', el => el.outerHTML);\n   * ```\n   *\n   * If you are using TypeScript, you may have to provide an explicit type to the\n   * first argument of the `pageFunction`.\n   * By default it is typed as `Element`, but you may need to provide a more\n   * specific sub-type:\n   *\n   * @example\n   *\n   * ```\n   * // if you don't provide HTMLInputElement here, TS will error\n   * // as `value` is not on `Element`\n   * const searchValue = await page.$eval('#search', (el: HTMLInputElement) => el.value);\n   * ```\n   *\n   * The compiler should be able to infer the return type\n   * from the `pageFunction` you provide. If it is unable to, you can use the generic\n   * type to tell the compiler what return type you expect from `$eval`:\n   *\n   * @example\n   *\n   * ```\n   * // The compiler can infer the return type in this case, but if it can't\n   * // or if you want to be more explicit, provide it as the generic type.\n   * const searchValue = await page.$eval<string>(\n   *  '#search', (el: HTMLInputElement) => el.value\n   * );\n   * ```\n   *\n   * @param selector - the\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n   * to query for\n   * @param pageFunction - the function to be evaluated in the page context.\n   * Will be passed the result of `document.querySelector(selector)` as its\n   * first argument.\n   * @param args - any additional arguments to pass through to `pageFunction`.\n   *\n   * @returns The result of calling `pageFunction`. If it returns an element it\n   * is wrapped in an {@link ElementHandle}, else the raw value itself is\n   * returned.\n   */\n\n\n  async $eval(selector, pageFunction, ...args) {\n    return this.mainFrame().$eval(selector, pageFunction, ...args);\n  }\n  /**\n   * This method runs `Array.from(document.querySelectorAll(selector))` within\n   * the page and passes the result as the first argument to the `pageFunction`.\n   *\n   * @remarks\n   *\n   * If `pageFunction` returns a promise `$$eval` will wait for the promise to\n   * resolve and then return its value.\n   *\n   * @example\n   *\n   * ```\n   * // get the amount of divs on the page\n   * const divCount = await page.$$eval('div', divs => divs.length);\n   *\n   * // get the text content of all the `.options` elements:\n   * const options = await page.$$eval('div > span.options', options => {\n   *   return options.map(option => option.textContent)\n   * });\n   * ```\n   *\n   * If you are using TypeScript, you may have to provide an explicit type to the\n   * first argument of the `pageFunction`.\n   * By default it is typed as `Element[]`, but you may need to provide a more\n   * specific sub-type:\n   *\n   * @example\n   *\n   * ```\n   * // if you don't provide HTMLInputElement here, TS will error\n   * // as `value` is not on `Element`\n   * await page.$$eval('input', (elements: HTMLInputElement[]) => {\n   *   return elements.map(e => e.value);\n   * });\n   * ```\n   *\n   * The compiler should be able to infer the return type\n   * from the `pageFunction` you provide. If it is unable to, you can use the generic\n   * type to tell the compiler what return type you expect from `$$eval`:\n   *\n   * @example\n   *\n   * ```\n   * // The compiler can infer the return type in this case, but if it can't\n   * // or if you want to be more explicit, provide it as the generic type.\n   * const allInputValues = await page.$$eval<string[]>(\n   *  'input', (elements: HTMLInputElement[]) => elements.map(e => e.textContent)\n   * );\n   * ```\n   *\n   * @param selector the\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n   * to query for\n   * @param pageFunction the function to be evaluated in the page context. Will\n   * be passed the result of `Array.from(document.querySelectorAll(selector))`\n   * as its first argument.\n   * @param args any additional arguments to pass through to `pageFunction`.\n   *\n   * @returns The result of calling `pageFunction`. If it returns an element it\n   * is wrapped in an {@link ElementHandle}, else the raw value itself is\n   * returned.\n   */\n\n\n  async $$eval(selector, pageFunction, ...args) {\n    return this.mainFrame().$$eval(selector, pageFunction, ...args);\n  }\n\n  async $$(selector) {\n    return this.mainFrame().$$(selector);\n  }\n\n  async $x(expression) {\n    return this.mainFrame().$x(expression);\n  }\n  /**\n   * If no URLs are specified, this method returns cookies for the current page\n   * URL. If URLs are specified, only cookies for those URLs are returned.\n   */\n\n\n  async cookies(...urls) {\n    const originalCookies = (await this._client.send('Network.getCookies', {\n      urls: urls.length ? urls : [this.url()]\n    })).cookies;\n    const unsupportedCookieAttributes = ['priority'];\n\n    const filterUnsupportedAttributes = cookie => {\n      for (const attr of unsupportedCookieAttributes) delete cookie[attr];\n\n      return cookie;\n    };\n\n    return originalCookies.map(filterUnsupportedAttributes);\n  }\n\n  async deleteCookie(...cookies) {\n    const pageURL = this.url();\n\n    for (const cookie of cookies) {\n      const item = Object.assign({}, cookie);\n      if (!cookie.url && pageURL.startsWith('http')) item.url = pageURL;\n      await this._client.send('Network.deleteCookies', item);\n    }\n  }\n\n  async setCookie(...cookies) {\n    const pageURL = this.url();\n    const startsWithHTTP = pageURL.startsWith('http');\n    const items = cookies.map(cookie => {\n      const item = Object.assign({}, cookie);\n      if (!item.url && startsWithHTTP) item.url = pageURL;\n      assert_js_1.assert(item.url !== 'about:blank', `Blank page can not have cookie \"${item.name}\"`);\n      assert_js_1.assert(!String.prototype.startsWith.call(item.url || '', 'data:'), `Data URL page can not have cookie \"${item.name}\"`);\n      return item;\n    });\n    await this.deleteCookie(...items);\n    if (items.length) await this._client.send('Network.setCookies', {\n      cookies: items\n    });\n  }\n\n  async addScriptTag(options) {\n    return this.mainFrame().addScriptTag(options);\n  }\n\n  async addStyleTag(options) {\n    return this.mainFrame().addStyleTag(options);\n  }\n\n  async exposeFunction(name, puppeteerFunction) {\n    if (this._pageBindings.has(name)) throw new Error(`Failed to add page binding with name ${name}: window['${name}'] already exists!`);\n\n    this._pageBindings.set(name, puppeteerFunction);\n\n    const expression = helper_js_1.helper.pageBindingInitString('exposedFun', name);\n    await this._client.send('Runtime.addBinding', {\n      name: name\n    });\n    await this._client.send('Page.addScriptToEvaluateOnNewDocument', {\n      source: expression\n    });\n    await Promise.all(this.frames().map(frame => frame.evaluate(expression).catch(helper_js_1.debugError)));\n  }\n\n  async authenticate(credentials) {\n    return this._frameManager.networkManager().authenticate(credentials);\n  }\n\n  async setExtraHTTPHeaders(headers) {\n    return this._frameManager.networkManager().setExtraHTTPHeaders(headers);\n  }\n\n  async setUserAgent(userAgent) {\n    return this._frameManager.networkManager().setUserAgent(userAgent);\n  }\n\n  async metrics() {\n    const response = await this._client.send('Performance.getMetrics');\n    return this._buildMetricsObject(response.metrics);\n  }\n\n  _emitMetrics(event) {\n    this.emit(\"metrics\"\n    /* Metrics */\n    , {\n      title: event.title,\n      metrics: this._buildMetricsObject(event.metrics)\n    });\n  }\n\n  _buildMetricsObject(metrics) {\n    const result = {};\n\n    for (const metric of metrics || []) {\n      if (supportedMetrics.has(metric.name)) result[metric.name] = metric.value;\n    }\n\n    return result;\n  }\n\n  _handleException(exceptionDetails) {\n    const message = helper_js_1.helper.getExceptionMessage(exceptionDetails);\n    const err = new Error(message);\n    err.stack = ''; // Don't report clientside error with a node stack attached\n\n    this.emit(\"pageerror\"\n    /* PageError */\n    , err);\n  }\n\n  async _onConsoleAPI(event) {\n    if (event.executionContextId === 0) {\n      // DevTools protocol stores the last 1000 console messages. These\n      // messages are always reported even for removed execution contexts. In\n      // this case, they are marked with executionContextId = 0 and are\n      // reported upon enabling Runtime agent.\n      //\n      // Ignore these messages since:\n      // - there's no execution context we can use to operate with message\n      //   arguments\n      // - these messages are reported before Puppeteer clients can subscribe\n      //   to the 'console'\n      //   page event.\n      //\n      // @see https://github.com/puppeteer/puppeteer/issues/3865\n      return;\n    }\n\n    const context = this._frameManager.executionContextById(event.executionContextId);\n\n    const values = event.args.map(arg => JSHandle_js_1.createJSHandle(context, arg));\n\n    this._addConsoleMessage(event.type, values, event.stackTrace);\n  }\n\n  async _onBindingCalled(event) {\n    let payload;\n\n    try {\n      payload = JSON.parse(event.payload);\n    } catch {\n      // The binding was either called by something in the page or it was\n      // called before our wrapper was initialized.\n      return;\n    }\n\n    const {\n      type,\n      name,\n      seq,\n      args\n    } = payload;\n    if (type !== 'exposedFun' || !this._pageBindings.has(name)) return;\n    let expression = null;\n\n    try {\n      const result = await this._pageBindings.get(name)(...args);\n      expression = helper_js_1.helper.pageBindingDeliverResultString(name, seq, result);\n    } catch (error) {\n      if (error instanceof Error) expression = helper_js_1.helper.pageBindingDeliverErrorString(name, seq, error.message, error.stack);else expression = helper_js_1.helper.pageBindingDeliverErrorValueString(name, seq, error);\n    }\n\n    this._client.send('Runtime.evaluate', {\n      expression,\n      contextId: event.executionContextId\n    }).catch(helper_js_1.debugError);\n  }\n\n  _addConsoleMessage(type, args, stackTrace) {\n    if (!this.listenerCount(\"console\"\n    /* Console */\n    )) {\n      args.forEach(arg => arg.dispose());\n      return;\n    }\n\n    const textTokens = [];\n\n    for (const arg of args) {\n      const remoteObject = arg._remoteObject;\n      if (remoteObject.objectId) textTokens.push(arg.toString());else textTokens.push(helper_js_1.helper.valueFromRemoteObject(remoteObject));\n    }\n\n    const stackTraceLocations = [];\n\n    if (stackTrace) {\n      for (const callFrame of stackTrace.callFrames) {\n        stackTraceLocations.push({\n          url: callFrame.url,\n          lineNumber: callFrame.lineNumber,\n          columnNumber: callFrame.columnNumber\n        });\n      }\n    }\n\n    const message = new ConsoleMessage_js_1.ConsoleMessage(type, textTokens.join(' '), args, stackTraceLocations);\n    this.emit(\"console\"\n    /* Console */\n    , message);\n  }\n\n  _onDialog(event) {\n    let dialogType = null;\n    const validDialogTypes = new Set(['alert', 'confirm', 'prompt', 'beforeunload']);\n\n    if (validDialogTypes.has(event.type)) {\n      dialogType = event.type;\n    }\n\n    assert_js_1.assert(dialogType, 'Unknown javascript dialog type: ' + event.type);\n    const dialog = new Dialog_js_1.Dialog(this._client, dialogType, event.message, event.defaultPrompt);\n    this.emit(\"dialog\"\n    /* Dialog */\n    , dialog);\n  }\n\n  url() {\n    return this.mainFrame().url();\n  }\n\n  async content() {\n    return await this._frameManager.mainFrame().content();\n  }\n\n  async setContent(html, options = {}) {\n    await this._frameManager.mainFrame().setContent(html, options);\n  }\n\n  async goto(url, options = {}) {\n    return await this._frameManager.mainFrame().goto(url, options);\n  }\n\n  async reload(options) {\n    const result = await Promise.all([this.waitForNavigation(options), this._client.send('Page.reload')]);\n    return result[0];\n  }\n\n  async waitForNavigation(options = {}) {\n    return await this._frameManager.mainFrame().waitForNavigation(options);\n  }\n\n  _sessionClosePromise() {\n    if (!this._disconnectPromise) this._disconnectPromise = new Promise(fulfill => this._client.once(Connection_js_1.CDPSessionEmittedEvents.Disconnected, () => fulfill(new Error('Target closed'))));\n    return this._disconnectPromise;\n  }\n\n  async waitForRequest(urlOrPredicate, options = {}) {\n    const {\n      timeout = this._timeoutSettings.timeout()\n    } = options;\n    return helper_js_1.helper.waitForEvent(this._frameManager.networkManager(), NetworkManager_js_1.NetworkManagerEmittedEvents.Request, request => {\n      if (helper_js_1.helper.isString(urlOrPredicate)) return urlOrPredicate === request.url();\n      if (typeof urlOrPredicate === 'function') return !!urlOrPredicate(request);\n      return false;\n    }, timeout, this._sessionClosePromise());\n  }\n\n  async waitForResponse(urlOrPredicate, options = {}) {\n    const {\n      timeout = this._timeoutSettings.timeout()\n    } = options;\n    return helper_js_1.helper.waitForEvent(this._frameManager.networkManager(), NetworkManager_js_1.NetworkManagerEmittedEvents.Response, response => {\n      if (helper_js_1.helper.isString(urlOrPredicate)) return urlOrPredicate === response.url();\n      if (typeof urlOrPredicate === 'function') return !!urlOrPredicate(response);\n      return false;\n    }, timeout, this._sessionClosePromise());\n  }\n\n  async goBack(options = {}) {\n    return this._go(-1, options);\n  }\n\n  async goForward(options = {}) {\n    return this._go(+1, options);\n  }\n\n  async _go(delta, options) {\n    const history = await this._client.send('Page.getNavigationHistory');\n    const entry = history.entries[history.currentIndex + delta];\n    if (!entry) return null;\n    const result = await Promise.all([this.waitForNavigation(options), this._client.send('Page.navigateToHistoryEntry', {\n      entryId: entry.id\n    })]);\n    return result[0];\n  }\n\n  async bringToFront() {\n    await this._client.send('Page.bringToFront');\n  }\n\n  async emulate(options) {\n    await Promise.all([this.setViewport(options.viewport), this.setUserAgent(options.userAgent)]);\n  }\n\n  async setJavaScriptEnabled(enabled) {\n    if (this._javascriptEnabled === enabled) return;\n    this._javascriptEnabled = enabled;\n    await this._client.send('Emulation.setScriptExecutionDisabled', {\n      value: !enabled\n    });\n  }\n\n  async setBypassCSP(enabled) {\n    await this._client.send('Page.setBypassCSP', {\n      enabled\n    });\n  }\n\n  async emulateMediaType(type) {\n    assert_js_1.assert(type === 'screen' || type === 'print' || type === null, 'Unsupported media type: ' + type);\n    await this._client.send('Emulation.setEmulatedMedia', {\n      media: type || ''\n    });\n  }\n\n  async emulateMediaFeatures(features) {\n    if (features === null) await this._client.send('Emulation.setEmulatedMedia', {\n      features: null\n    });\n\n    if (Array.isArray(features)) {\n      features.every(mediaFeature => {\n        const name = mediaFeature.name;\n        assert_js_1.assert(/^prefers-(?:color-scheme|reduced-motion)$/.test(name), 'Unsupported media feature: ' + name);\n        return true;\n      });\n      await this._client.send('Emulation.setEmulatedMedia', {\n        features: features\n      });\n    }\n  }\n\n  async emulateTimezone(timezoneId) {\n    try {\n      await this._client.send('Emulation.setTimezoneOverride', {\n        timezoneId: timezoneId || ''\n      });\n    } catch (error) {\n      if (error.message.includes('Invalid timezone')) throw new Error(`Invalid timezone ID: ${timezoneId}`);\n      throw error;\n    }\n  }\n  /**\n   * Emulates the idle state.\n   * If no arguments set, clears idle state emulation.\n   *\n   * @example\n   * ```js\n   * // set idle emulation\n   * await page.emulateIdleState({isUserActive: true, isScreenUnlocked: false});\n   *\n   * // do some checks here\n   * ...\n   *\n   * // clear idle emulation\n   * await page.emulateIdleState();\n   * ```\n   *\n   * @param overrides Mock idle state. If not set, clears idle overrides\n   * @param isUserActive Mock isUserActive\n   * @param isScreenUnlocked Mock isScreenUnlocked\n   */\n\n\n  async emulateIdleState(overrides) {\n    if (overrides) {\n      await this._client.send('Emulation.setIdleOverride', {\n        isUserActive: overrides.isUserActive,\n        isScreenUnlocked: overrides.isScreenUnlocked\n      });\n    } else {\n      await this._client.send('Emulation.clearIdleOverride');\n    }\n  }\n  /**\n   * Simulates the given vision deficiency on the page.\n   *\n   * @example\n   * ```js\n   * const puppeteer = require('puppeteer');\n   *\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   const page = await browser.newPage();\n   *   await page.goto('https://v8.dev/blog/10-years');\n   *\n   *   await page.emulateVisionDeficiency('achromatopsia');\n   *   await page.screenshot({ path: 'achromatopsia.png' });\n   *\n   *   await page.emulateVisionDeficiency('deuteranopia');\n   *   await page.screenshot({ path: 'deuteranopia.png' });\n   *\n   *   await page.emulateVisionDeficiency('blurredVision');\n   *   await page.screenshot({ path: 'blurred-vision.png' });\n   *\n   *   await browser.close();\n   * })();\n   * ```\n   *\n   * @param type - the type of deficiency to simulate, or `'none'` to reset.\n   */\n\n\n  async emulateVisionDeficiency(type) {\n    const visionDeficiencies = new Set(['none', 'achromatopsia', 'blurredVision', 'deuteranopia', 'protanopia', 'tritanopia']);\n\n    try {\n      assert_js_1.assert(!type || visionDeficiencies.has(type), `Unsupported vision deficiency: ${type}`);\n      await this._client.send('Emulation.setEmulatedVisionDeficiency', {\n        type: type || 'none'\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async setViewport(viewport) {\n    const needsReload = await this._emulationManager.emulateViewport(viewport);\n    this._viewport = viewport;\n    if (needsReload) await this.reload();\n  }\n\n  viewport() {\n    return this._viewport;\n  }\n  /**\n   * @remarks\n   *\n   * Evaluates a function in the page's context and returns the result.\n   *\n   * If the function passed to `page.evaluteHandle` returns a Promise, the\n   * function will wait for the promise to resolve and return its value.\n   *\n   * @example\n   *\n   * ```js\n   * const result = await frame.evaluate(() => {\n   *   return Promise.resolve(8 * 7);\n   * });\n   * console.log(result); // prints \"56\"\n   * ```\n   *\n   * You can pass a string instead of a function (although functions are\n   * recommended as they are easier to debug and use with TypeScript):\n   *\n   * @example\n   * ```\n   * const aHandle = await page.evaluate('1 + 2');\n   * ```\n   *\n   * To get the best TypeScript experience, you should pass in as the\n   * generic the type of `pageFunction`:\n   *\n   * ```\n   * const aHandle = await page.evaluate<() => number>(() => 2);\n   * ```\n   *\n   * @example\n   *\n   * {@link ElementHandle} instances (including {@link JSHandle}s) can be passed\n   * as arguments to the `pageFunction`:\n   *\n   * ```\n   * const bodyHandle = await page.$('body');\n   * const html = await page.evaluate(body => body.innerHTML, bodyHandle);\n   * await bodyHandle.dispose();\n   * ```\n   *\n   * @param pageFunction - a function that is run within the page\n   * @param args - arguments to be passed to the pageFunction\n   *\n   * @returns the return value of `pageFunction`.\n   */\n\n\n  async evaluate(pageFunction, ...args) {\n    return this._frameManager.mainFrame().evaluate(pageFunction, ...args);\n  }\n\n  async evaluateOnNewDocument(pageFunction, ...args) {\n    const source = helper_js_1.helper.evaluationString(pageFunction, ...args);\n    await this._client.send('Page.addScriptToEvaluateOnNewDocument', {\n      source\n    });\n  }\n\n  async setCacheEnabled(enabled = true) {\n    await this._frameManager.networkManager().setCacheEnabled(enabled);\n  }\n\n  async screenshot(options = {}) {\n    let screenshotType = null; // options.type takes precedence over inferring the type from options.path\n    // because it may be a 0-length file with no extension created beforehand\n    // (i.e. as a temp file).\n\n    if (options.type) {\n      assert_js_1.assert(options.type === 'png' || options.type === 'jpeg', 'Unknown options.type value: ' + options.type);\n      screenshotType = options.type;\n    } else if (options.path) {\n      const filePath = options.path;\n      const extension = filePath.slice(filePath.lastIndexOf('.') + 1).toLowerCase();\n      if (extension === 'png') screenshotType = 'png';else if (extension === 'jpg' || extension === 'jpeg') screenshotType = 'jpeg';\n      assert_js_1.assert(screenshotType, `Unsupported screenshot type for extension \\`.${extension}\\``);\n    }\n\n    if (!screenshotType) screenshotType = 'png';\n\n    if (options.quality) {\n      assert_js_1.assert(screenshotType === 'jpeg', 'options.quality is unsupported for the ' + screenshotType + ' screenshots');\n      assert_js_1.assert(typeof options.quality === 'number', 'Expected options.quality to be a number but found ' + typeof options.quality);\n      assert_js_1.assert(Number.isInteger(options.quality), 'Expected options.quality to be an integer');\n      assert_js_1.assert(options.quality >= 0 && options.quality <= 100, 'Expected options.quality to be between 0 and 100 (inclusive), got ' + options.quality);\n    }\n\n    assert_js_1.assert(!options.clip || !options.fullPage, 'options.clip and options.fullPage are exclusive');\n\n    if (options.clip) {\n      assert_js_1.assert(typeof options.clip.x === 'number', 'Expected options.clip.x to be a number but found ' + typeof options.clip.x);\n      assert_js_1.assert(typeof options.clip.y === 'number', 'Expected options.clip.y to be a number but found ' + typeof options.clip.y);\n      assert_js_1.assert(typeof options.clip.width === 'number', 'Expected options.clip.width to be a number but found ' + typeof options.clip.width);\n      assert_js_1.assert(typeof options.clip.height === 'number', 'Expected options.clip.height to be a number but found ' + typeof options.clip.height);\n      assert_js_1.assert(options.clip.width !== 0, 'Expected options.clip.width not to be 0.');\n      assert_js_1.assert(options.clip.height !== 0, 'Expected options.clip.height not to be 0.');\n    }\n\n    return this._screenshotTaskQueue.postTask(() => this._screenshotTask(screenshotType, options));\n  }\n\n  async _screenshotTask(format, options) {\n    await this._client.send('Target.activateTarget', {\n      targetId: this._target._targetId\n    });\n    let clip = options.clip ? processClip(options.clip) : undefined;\n\n    if (options.fullPage) {\n      const metrics = await this._client.send('Page.getLayoutMetrics');\n      const width = Math.ceil(metrics.contentSize.width);\n      const height = Math.ceil(metrics.contentSize.height); // Overwrite clip for full page at all times.\n\n      clip = {\n        x: 0,\n        y: 0,\n        width,\n        height,\n        scale: 1\n      };\n      const {\n        isMobile = false,\n        deviceScaleFactor = 1,\n        isLandscape = false\n      } = this._viewport || {};\n      const screenOrientation = isLandscape ? {\n        angle: 90,\n        type: 'landscapePrimary'\n      } : {\n        angle: 0,\n        type: 'portraitPrimary'\n      };\n      await this._client.send('Emulation.setDeviceMetricsOverride', {\n        mobile: isMobile,\n        width,\n        height,\n        deviceScaleFactor,\n        screenOrientation\n      });\n    }\n\n    const shouldSetDefaultBackground = options.omitBackground && format === 'png';\n    if (shouldSetDefaultBackground) await this._client.send('Emulation.setDefaultBackgroundColorOverride', {\n      color: {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 0\n      }\n    });\n    const result = await this._client.send('Page.captureScreenshot', {\n      format,\n      quality: options.quality,\n      clip\n    });\n    if (shouldSetDefaultBackground) await this._client.send('Emulation.setDefaultBackgroundColorOverride');\n    if (options.fullPage && this._viewport) await this.setViewport(this._viewport);\n    const buffer = options.encoding === 'base64' ? result.data : Buffer.from(result.data, 'base64');\n\n    if (!environment_js_1.isNode && options.path) {\n      throw new Error('Screenshots can only be written to a file path in a Node environment.');\n    }\n\n    const fs = await helper_js_1.helper.importFSModule();\n    if (options.path) await fs.promises.writeFile(options.path, buffer);\n    return buffer;\n\n    function processClip(clip) {\n      const x = Math.round(clip.x);\n      const y = Math.round(clip.y);\n      const width = Math.round(clip.width + clip.x - x);\n      const height = Math.round(clip.height + clip.y - y);\n      return {\n        x,\n        y,\n        width,\n        height,\n        scale: 1\n      };\n    }\n  }\n  /**\n   * Generatees a PDF of the page with the `print` CSS media type.\n   * @remarks\n   *\n   * IMPORTANT: PDF generation is only supported in Chrome headless mode.\n   *\n   * To generate a PDF with the `screen` media type, call\n   * {@link Page.emulateMediaType | `page.emulateMediaType('screen')`} before\n   * calling `page.pdf()`.\n   *\n   * By default, `page.pdf()` generates a pdf with modified colors for printing.\n   * Use the\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-print-color-adjust | `-webkit-print-color-adjust`}\n   * property to force rendering of exact colors.\n   *\n   *\n   * @param options - options for generating the PDF.\n   */\n\n\n  async pdf(options = {}) {\n    const {\n      scale = 1,\n      displayHeaderFooter = false,\n      headerTemplate = '',\n      footerTemplate = '',\n      printBackground = false,\n      landscape = false,\n      pageRanges = '',\n      preferCSSPageSize = false,\n      margin = {},\n      path = null\n    } = options;\n    let paperWidth = 8.5;\n    let paperHeight = 11;\n\n    if (options.format) {\n      const format = PDFOptions_js_1.paperFormats[options.format.toLowerCase()];\n      assert_js_1.assert(format, 'Unknown paper format: ' + options.format);\n      paperWidth = format.width;\n      paperHeight = format.height;\n    } else {\n      paperWidth = convertPrintParameterToInches(options.width) || paperWidth;\n      paperHeight = convertPrintParameterToInches(options.height) || paperHeight;\n    }\n\n    const marginTop = convertPrintParameterToInches(margin.top) || 0;\n    const marginLeft = convertPrintParameterToInches(margin.left) || 0;\n    const marginBottom = convertPrintParameterToInches(margin.bottom) || 0;\n    const marginRight = convertPrintParameterToInches(margin.right) || 0;\n    const result = await this._client.send('Page.printToPDF', {\n      transferMode: 'ReturnAsStream',\n      landscape,\n      displayHeaderFooter,\n      headerTemplate,\n      footerTemplate,\n      printBackground,\n      scale,\n      paperWidth,\n      paperHeight,\n      marginTop,\n      marginBottom,\n      marginLeft,\n      marginRight,\n      pageRanges,\n      preferCSSPageSize\n    });\n    return await helper_js_1.helper.readProtocolStream(this._client, result.stream, path);\n  }\n\n  async title() {\n    return this.mainFrame().title();\n  }\n\n  async close(options = {\n    runBeforeUnload: undefined\n  }) {\n    assert_js_1.assert(!!this._client._connection, 'Protocol error: Connection closed. Most likely the page has been closed.');\n    const runBeforeUnload = !!options.runBeforeUnload;\n\n    if (runBeforeUnload) {\n      await this._client.send('Page.close');\n    } else {\n      await this._client._connection.send('Target.closeTarget', {\n        targetId: this._target._targetId\n      });\n      await this._target._isClosedPromise;\n    }\n  }\n\n  isClosed() {\n    return this._closed;\n  }\n\n  get mouse() {\n    return this._mouse;\n  }\n\n  click(selector, options = {}) {\n    return this.mainFrame().click(selector, options);\n  }\n\n  focus(selector) {\n    return this.mainFrame().focus(selector);\n  }\n\n  hover(selector) {\n    return this.mainFrame().hover(selector);\n  }\n\n  select(selector, ...values) {\n    return this.mainFrame().select(selector, ...values);\n  }\n\n  tap(selector) {\n    return this.mainFrame().tap(selector);\n  }\n\n  type(selector, text, options) {\n    return this.mainFrame().type(selector, text, options);\n  }\n  /**\n   * @remarks\n   *\n   * This method behaves differently depending on the first parameter. If it's a\n   * `string`, it will be treated as a `selector` or `xpath` (if the string\n   * starts with `//`). This method then is a shortcut for\n   * {@link Page.waitForSelector} or {@link Page.waitForXPath}.\n   *\n   * If the first argument is a function this method is a shortcut for\n   * {@link Page.waitForFunction}.\n   *\n   * If the first argument is a `number`, it's treated as a timeout in\n   * milliseconds and the method returns a promise which resolves after the\n   * timeout.\n   *\n   * @param selectorOrFunctionOrTimeout - a selector, predicate or timeout to\n   * wait for.\n   * @param options - optional waiting parameters.\n   * @param args - arguments to pass to `pageFunction`.\n   *\n   * @deprecated Don't use this method directly. Instead use the more explicit\n   * methods available: {@link Page.waitForSelector},\n   * {@link Page.waitForXPath}, {@link Page.waitForFunction} or\n   * {@link Page.waitForTimeout}.\n   */\n\n\n  waitFor(selectorOrFunctionOrTimeout, options = {}, ...args) {\n    return this.mainFrame().waitFor(selectorOrFunctionOrTimeout, options, ...args);\n  }\n  /**\n   * Causes your script to wait for the given number of milliseconds.\n   *\n   * @remarks\n   *\n   * It's generally recommended to not wait for a number of seconds, but instead\n   * use {@link Page.waitForSelector}, {@link Page.waitForXPath} or\n   * {@link Page.waitForFunction} to wait for exactly the conditions you want.\n   *\n   * @example\n   *\n   * Wait for 1 second:\n   *\n   * ```\n   * await page.waitForTimeout(1000);\n   * ```\n   *\n   * @param milliseconds - the number of milliseconds to wait.\n   */\n\n\n  waitForTimeout(milliseconds) {\n    return this.mainFrame().waitForTimeout(milliseconds);\n  }\n\n  waitForSelector(selector, options = {}) {\n    return this.mainFrame().waitForSelector(selector, options);\n  }\n\n  waitForXPath(xpath, options = {}) {\n    return this.mainFrame().waitForXPath(xpath, options);\n  }\n\n  waitForFunction(pageFunction, options = {}, ...args) {\n    return this.mainFrame().waitForFunction(pageFunction, options, ...args);\n  }\n\n}\n\nexports.Page = Page;\nconst supportedMetrics = new Set(['Timestamp', 'Documents', 'Frames', 'JSEventListeners', 'Nodes', 'LayoutCount', 'RecalcStyleCount', 'LayoutDuration', 'RecalcStyleDuration', 'ScriptDuration', 'TaskDuration', 'JSHeapUsedSize', 'JSHeapTotalSize']);\nconst unitToPixels = {\n  px: 1,\n  in: 96,\n  cm: 37.8,\n  mm: 3.78\n};\n\nfunction convertPrintParameterToInches(parameter) {\n  if (typeof parameter === 'undefined') return undefined;\n  let pixels;\n\n  if (helper_js_1.helper.isNumber(parameter)) {\n    // Treat numbers as pixel values to be aligned with phantom's paperSize.\n    pixels =\n    /** @type {number} */\n    parameter;\n  } else if (helper_js_1.helper.isString(parameter)) {\n    const text =\n    /** @type {string} */\n    parameter;\n    let unit = text.substring(text.length - 2).toLowerCase();\n    let valueText = '';\n\n    if (unitToPixels.hasOwnProperty(unit)) {\n      valueText = text.substring(0, text.length - 2);\n    } else {\n      // In case of unknown unit try to parse the whole parameter as number of pixels.\n      // This is consistent with phantom's paperSize behavior.\n      unit = 'px';\n      valueText = text;\n    }\n\n    const value = Number(valueText);\n    assert_js_1.assert(!isNaN(value), 'Failed to parse parameter value: ' + text);\n    pixels = value * unitToPixels[unit];\n  } else {\n    throw new Error('page.pdf() Cannot handle parameter type: ' + typeof parameter);\n  }\n\n  return pixels / 96;\n}","map":{"version":3,"sources":["C:/Users/PC/source/repos/LaboratoryApplication/client-app/node_modules/puppeteer/lib/cjs/puppeteer/common/Page.js"],"names":["Object","defineProperty","exports","value","Page","EventEmitter_js_1","require","Connection_js_1","Dialog_js_1","EmulationManager_js_1","FrameManager_js_1","Input_js_1","Tracing_js_1","assert_js_1","helper_js_1","Coverage_js_1","WebWorker_js_1","JSHandle_js_1","NetworkManager_js_1","Accessibility_js_1","TimeoutSettings_js_1","FileChooser_js_1","ConsoleMessage_js_1","PDFOptions_js_1","environment_js_1","ScreenshotTaskQueue","constructor","_chain","Promise","resolve","undefined","postTask","task","result","then","catch","EventEmitter","client","target","ignoreHTTPSErrors","_closed","_timeoutSettings","TimeoutSettings","_pageBindings","Map","_javascriptEnabled","_workers","_fileChooserInterceptors","Set","_client","_target","_keyboard","Keyboard","_mouse","Mouse","_touchscreen","Touchscreen","_accessibility","Accessibility","_frameManager","FrameManager","_emulationManager","EmulationManager","_tracing","Tracing","_coverage","Coverage","_screenshotTaskQueue","_viewport","on","event","targetInfo","type","send","sessionId","debugError","session","Connection","fromSession","worker","WebWorker","url","_addConsoleMessage","bind","_handleException","set","emit","get","delete","FrameManagerEmittedEvents","FrameAttached","FrameDetached","FrameNavigated","networkManager","NetworkManagerEmittedEvents","Request","Response","RequestFailed","RequestFinished","_onConsoleAPI","_onBindingCalled","_onDialog","exception","exceptionDetails","_onTargetCrashed","_emitMetrics","_onLogEntryAdded","_onFileChooser","_isClosedPromise","create","defaultViewport","page","_initialize","setViewport","all","initialize","autoAttach","waitForDebuggerOnStart","flatten","size","frame","frameId","context","executionContext","element","_adoptBackendNodeId","backendNodeId","interceptors","Array","from","clear","fileChooser","FileChooser","interceptor","call","isJavaScriptEnabled","waitForFileChooser","options","enabled","timeout","callback","promise","x","add","helper","waitWithTimeout","error","setGeolocation","longitude","latitude","accuracy","Error","browser","browserContext","level","text","args","source","lineNumber","entry","map","arg","releaseObject","ConsoleMessage","mainFrame","keyboard","touchscreen","coverage","tracing","accessibility","frames","workers","values","setRequestInterception","setOfflineMode","setDefaultNavigationTimeout","setDefaultTimeout","$","selector","evaluateHandle","pageFunction","queryObjects","prototypeHandle","$eval","$$eval","$$","$x","expression","cookies","urls","originalCookies","length","unsupportedCookieAttributes","filterUnsupportedAttributes","cookie","attr","deleteCookie","pageURL","item","assign","startsWith","setCookie","startsWithHTTP","items","assert","name","String","prototype","addScriptTag","addStyleTag","exposeFunction","puppeteerFunction","has","pageBindingInitString","evaluate","authenticate","credentials","setExtraHTTPHeaders","headers","setUserAgent","userAgent","metrics","response","_buildMetricsObject","title","metric","supportedMetrics","message","getExceptionMessage","err","stack","executionContextId","executionContextById","createJSHandle","stackTrace","payload","JSON","parse","seq","pageBindingDeliverResultString","pageBindingDeliverErrorString","pageBindingDeliverErrorValueString","contextId","listenerCount","forEach","dispose","textTokens","remoteObject","_remoteObject","objectId","push","toString","valueFromRemoteObject","stackTraceLocations","callFrame","callFrames","columnNumber","join","dialogType","validDialogTypes","dialog","Dialog","defaultPrompt","content","setContent","html","goto","reload","waitForNavigation","_sessionClosePromise","_disconnectPromise","fulfill","once","CDPSessionEmittedEvents","Disconnected","waitForRequest","urlOrPredicate","waitForEvent","request","isString","waitForResponse","goBack","_go","goForward","delta","history","entries","currentIndex","entryId","id","bringToFront","emulate","viewport","setJavaScriptEnabled","setBypassCSP","emulateMediaType","media","emulateMediaFeatures","features","isArray","every","mediaFeature","test","emulateTimezone","timezoneId","includes","emulateIdleState","overrides","isUserActive","isScreenUnlocked","emulateVisionDeficiency","visionDeficiencies","needsReload","emulateViewport","evaluateOnNewDocument","evaluationString","setCacheEnabled","screenshot","screenshotType","path","filePath","extension","slice","lastIndexOf","toLowerCase","quality","Number","isInteger","clip","fullPage","y","width","height","_screenshotTask","format","targetId","_targetId","processClip","Math","ceil","contentSize","scale","isMobile","deviceScaleFactor","isLandscape","screenOrientation","angle","mobile","shouldSetDefaultBackground","omitBackground","color","r","g","b","a","buffer","encoding","data","Buffer","isNode","fs","importFSModule","promises","writeFile","round","pdf","displayHeaderFooter","headerTemplate","footerTemplate","printBackground","landscape","pageRanges","preferCSSPageSize","margin","paperWidth","paperHeight","paperFormats","convertPrintParameterToInches","marginTop","top","marginLeft","left","marginBottom","bottom","marginRight","right","transferMode","readProtocolStream","stream","close","runBeforeUnload","_connection","isClosed","mouse","click","focus","hover","select","tap","waitFor","selectorOrFunctionOrTimeout","waitForTimeout","milliseconds","waitForSelector","waitForXPath","xpath","waitForFunction","unitToPixels","px","in","cm","mm","parameter","pixels","isNumber","unit","substring","valueText","hasOwnProperty","isNaN"],"mappings":"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AL,CAAc8H,MAAd,EAAX,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,QAAMC,sBAAN,CAA6B1K,KAA7B,EAAoC;AAChC,WAAO,KAAKwD,aAAL,CAAmBkC,cAAnB,GAAoCgF,sBAApC,CAA2D1K,KAA3D,CAAP;AACH;AACD;AACJ;AACA;;;AACI2K,EAAAA,cAAc,CAACpC,OAAD,EAAU;AACpB,WAAO,KAAK/E,aAAL,CAAmBkC,cAAnB,GAAoCiF,cAApC,CAAmDpC,OAAnD,CAAP;AACH;AACD;AACJ;AACA;;;AACIqC,EAAAA,2BAA2B,CAACpC,OAAD,EAAU;AACjC,SAAKlG,gBAAL,CAAsBsI,2BAAtB,CAAkDpC,OAAlD;AACH;AACD;AACJ;AACA;;;AACIqC,EAAAA,iBAAiB,CAACrC,OAAD,EAAU;AACvB,SAAKlG,gBAAL,CAAsBuI,iBAAtB,CAAwCrC,OAAxC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,QAAMsC,CAAN,CAAQC,QAAR,EAAkB;AACd,WAAO,KAAKd,SAAL,GAAiBa,CAAjB,CAAmBC,QAAnB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,QAAMC,cAAN,CAAqBC,YAArB,EAAmC,GAAGxB,IAAtC,EAA4C;AACxC,UAAMlC,OAAO,GAAG,MAAM,KAAK0C,SAAL,GAAiBzC,gBAAjB,EAAtB;AACA,WAAOD,OAAO,CAACyD,cAAR,CAAuBC,YAAvB,EAAqC,GAAGxB,IAAxC,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,QAAMyB,YAAN,CAAmBC,eAAnB,EAAoC;AAChC,UAAM5D,OAAO,GAAG,MAAM,KAAK0C,SAAL,GAAiBzC,gBAAjB,EAAtB;AACA,WAAOD,OAAO,CAAC2D,YAAR,CAAqBC,eAArB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,QAAMC,KAAN,CAAYL,QAAZ,EAAsBE,YAAtB,EAAoC,GAAGxB,IAAvC,EAA6C;AACzC,WAAO,KAAKQ,SAAL,GAAiBmB,KAAjB,CAAuBL,QAAvB,EAAiCE,YAAjC,EAA+C,GAAGxB,IAAlD,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,QAAM4B,MAAN,CAAaN,QAAb,EAAuBE,YAAvB,EAAqC,GAAGxB,IAAxC,EAA8C;AAC1C,WAAO,KAAKQ,SAAL,GAAiBoB,MAAjB,CAAwBN,QAAxB,EAAkCE,YAAlC,EAAgD,GAAGxB,IAAnD,CA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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Page = void 0;\nconst EventEmitter_js_1 = require(\"./EventEmitter.js\");\nconst Connection_js_1 = require(\"./Connection.js\");\nconst Dialog_js_1 = require(\"./Dialog.js\");\nconst EmulationManager_js_1 = require(\"./EmulationManager.js\");\nconst FrameManager_js_1 = require(\"./FrameManager.js\");\nconst Input_js_1 = require(\"./Input.js\");\nconst Tracing_js_1 = require(\"./Tracing.js\");\nconst assert_js_1 = require(\"./assert.js\");\nconst helper_js_1 = require(\"./helper.js\");\nconst Coverage_js_1 = require(\"./Coverage.js\");\nconst WebWorker_js_1 = require(\"./WebWorker.js\");\nconst JSHandle_js_1 = require(\"./JSHandle.js\");\nconst NetworkManager_js_1 = require(\"./NetworkManager.js\");\nconst Accessibility_js_1 = require(\"./Accessibility.js\");\nconst TimeoutSettings_js_1 = require(\"./TimeoutSettings.js\");\nconst FileChooser_js_1 = require(\"./FileChooser.js\");\nconst ConsoleMessage_js_1 = require(\"./ConsoleMessage.js\");\nconst PDFOptions_js_1 = require(\"./PDFOptions.js\");\nconst environment_js_1 = require(\"../environment.js\");\nclass ScreenshotTaskQueue {\n    constructor() {\n        this._chain = Promise.resolve(undefined);\n    }\n    postTask(task) {\n        const result = this._chain.then(task);\n        this._chain = result.catch(() => { });\n        return result;\n    }\n}\n/**\n * Page provides methods to interact with a single tab or\n * {@link https://developer.chrome.com/extensions/background_pages | extension background page} in Chromium.\n *\n * @remarks\n *\n * One Browser instance might have multiple Page instances.\n *\n * @example\n * This example creates a page, navigates it to a URL, and then * saves a screenshot:\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://example.com');\n *   await page.screenshot({path: 'screenshot.png'});\n *   await browser.close();\n * })();\n * ```\n *\n * The Page class extends from Puppeteer's {@link EventEmitter} class and will\n * emit various events which are documented in the {@link PageEmittedEvents} enum.\n *\n * @example\n * This example logs a message for a single page `load` event:\n * ```js\n * page.once('load', () => console.log('Page loaded!'));\n * ```\n *\n * To unsubscribe from events use the `off` method:\n *\n * ```js\n * function logRequest(interceptedRequest) {\n *   console.log('A request was made:', interceptedRequest.url());\n * }\n * page.on('request', logRequest);\n * // Sometime later...\n * page.off('request', logRequest);\n * ```\n * @public\n */\nclass Page extends EventEmitter_js_1.EventEmitter {\n    /**\n     * @internal\n     */\n    constructor(client, target, ignoreHTTPSErrors) {\n        super();\n        this._closed = false;\n        this._timeoutSettings = new TimeoutSettings_js_1.TimeoutSettings();\n        this._pageBindings = new Map();\n        this._javascriptEnabled = true;\n        this._workers = new Map();\n        // TODO: improve this typedef - it's a function that takes a file chooser or\n        // something?\n        this._fileChooserInterceptors = new Set();\n        this._client = client;\n        this._target = target;\n        this._keyboard = new Input_js_1.Keyboard(client);\n        this._mouse = new Input_js_1.Mouse(client, this._keyboard);\n        this._touchscreen = new Input_js_1.Touchscreen(client, this._keyboard);\n        this._accessibility = new Accessibility_js_1.Accessibility(client);\n        this._frameManager = new FrameManager_js_1.FrameManager(client, this, ignoreHTTPSErrors, this._timeoutSettings);\n        this._emulationManager = new EmulationManager_js_1.EmulationManager(client);\n        this._tracing = new Tracing_js_1.Tracing(client);\n        this._coverage = new Coverage_js_1.Coverage(client);\n        this._screenshotTaskQueue = new ScreenshotTaskQueue();\n        this._viewport = null;\n        client.on('Target.attachedToTarget', (event) => {\n            if (event.targetInfo.type !== 'worker') {\n                // If we don't detach from service workers, they will never die.\n                client\n                    .send('Target.detachFromTarget', {\n                    sessionId: event.sessionId,\n                })\n                    .catch(helper_js_1.debugError);\n                return;\n            }\n            const session = Connection_js_1.Connection.fromSession(client).session(event.sessionId);\n            const worker = new WebWorker_js_1.WebWorker(session, event.targetInfo.url, this._addConsoleMessage.bind(this), this._handleException.bind(this));\n            this._workers.set(event.sessionId, worker);\n            this.emit(\"workercreated\" /* WorkerCreated */, worker);\n        });\n        client.on('Target.detachedFromTarget', (event) => {\n            const worker = this._workers.get(event.sessionId);\n            if (!worker)\n                return;\n            this.emit(\"workerdestroyed\" /* WorkerDestroyed */, worker);\n            this._workers.delete(event.sessionId);\n        });\n        this._frameManager.on(FrameManager_js_1.FrameManagerEmittedEvents.FrameAttached, (event) => this.emit(\"frameattached\" /* FrameAttached */, event));\n        this._frameManager.on(FrameManager_js_1.FrameManagerEmittedEvents.FrameDetached, (event) => this.emit(\"framedetached\" /* FrameDetached */, event));\n        this._frameManager.on(FrameManager_js_1.FrameManagerEmittedEvents.FrameNavigated, (event) => this.emit(\"framenavigated\" /* FrameNavigated */, event));\n        const networkManager = this._frameManager.networkManager();\n        networkManager.on(NetworkManager_js_1.NetworkManagerEmittedEvents.Request, (event) => this.emit(\"request\" /* Request */, event));\n        networkManager.on(NetworkManager_js_1.NetworkManagerEmittedEvents.Response, (event) => this.emit(\"response\" /* Response */, event));\n        networkManager.on(NetworkManager_js_1.NetworkManagerEmittedEvents.RequestFailed, (event) => this.emit(\"requestfailed\" /* RequestFailed */, event));\n        networkManager.on(NetworkManager_js_1.NetworkManagerEmittedEvents.RequestFinished, (event) => this.emit(\"requestfinished\" /* RequestFinished */, event));\n        this._fileChooserInterceptors = new Set();\n        client.on('Page.domContentEventFired', () => this.emit(\"domcontentloaded\" /* DOMContentLoaded */));\n        client.on('Page.loadEventFired', () => this.emit(\"load\" /* Load */));\n        client.on('Runtime.consoleAPICalled', (event) => this._onConsoleAPI(event));\n        client.on('Runtime.bindingCalled', (event) => this._onBindingCalled(event));\n        client.on('Page.javascriptDialogOpening', (event) => this._onDialog(event));\n        client.on('Runtime.exceptionThrown', (exception) => this._handleException(exception.exceptionDetails));\n        client.on('Inspector.targetCrashed', () => this._onTargetCrashed());\n        client.on('Performance.metrics', (event) => this._emitMetrics(event));\n        client.on('Log.entryAdded', (event) => this._onLogEntryAdded(event));\n        client.on('Page.fileChooserOpened', (event) => this._onFileChooser(event));\n        this._target._isClosedPromise.then(() => {\n            this.emit(\"close\" /* Close */);\n            this._closed = true;\n        });\n    }\n    /**\n     * @internal\n     */\n    static async create(client, target, ignoreHTTPSErrors, defaultViewport) {\n        const page = new Page(client, target, ignoreHTTPSErrors);\n        await page._initialize();\n        if (defaultViewport)\n            await page.setViewport(defaultViewport);\n        return page;\n    }\n    async _initialize() {\n        await Promise.all([\n            this._frameManager.initialize(),\n            this._client.send('Target.setAutoAttach', {\n                autoAttach: true,\n                waitForDebuggerOnStart: false,\n                flatten: true,\n            }),\n            this._client.send('Performance.enable'),\n            this._client.send('Log.enable'),\n        ]);\n    }\n    async _onFileChooser(event) {\n        if (!this._fileChooserInterceptors.size)\n            return;\n        const frame = this._frameManager.frame(event.frameId);\n        const context = await frame.executionContext();\n        const element = await context._adoptBackendNodeId(event.backendNodeId);\n        const interceptors = Array.from(this._fileChooserInterceptors);\n        this._fileChooserInterceptors.clear();\n        const fileChooser = new FileChooser_js_1.FileChooser(element, event);\n        for (const interceptor of interceptors)\n            interceptor.call(null, fileChooser);\n    }\n    /**\n     * @returns `true` if the page has JavaScript enabled, `false` otherwise.\n     */\n    isJavaScriptEnabled() {\n        return this._javascriptEnabled;\n    }\n    /**\n     * @param options - Optional waiting parameters\n     * @returns Resolves after a page requests a file picker.\n     */\n    async waitForFileChooser(options = {}) {\n        if (!this._fileChooserInterceptors.size)\n            await this._client.send('Page.setInterceptFileChooserDialog', {\n                enabled: true,\n            });\n        const { timeout = this._timeoutSettings.timeout() } = options;\n        let callback;\n        const promise = new Promise((x) => (callback = x));\n        this._fileChooserInterceptors.add(callback);\n        return helper_js_1.helper\n            .waitWithTimeout(promise, 'waiting for file chooser', timeout)\n            .catch((error) => {\n            this._fileChooserInterceptors.delete(callback);\n            throw error;\n        });\n    }\n    /**\n     * Sets the page's geolocation.\n     *\n     * @remarks\n     * Consider using {@link BrowserContext.overridePermissions} to grant\n     * permissions for the page to read its geolocation.\n     *\n     * @example\n     * ```js\n     * await page.setGeolocation({latitude: 59.95, longitude: 30.31667});\n     * ```\n     */\n    async setGeolocation(options) {\n        const { longitude, latitude, accuracy = 0 } = options;\n        if (longitude < -180 || longitude > 180)\n            throw new Error(`Invalid longitude \"${longitude}\": precondition -180 <= LONGITUDE <= 180 failed.`);\n        if (latitude < -90 || latitude > 90)\n            throw new Error(`Invalid latitude \"${latitude}\": precondition -90 <= LATITUDE <= 90 failed.`);\n        if (accuracy < 0)\n            throw new Error(`Invalid accuracy \"${accuracy}\": precondition 0 <= ACCURACY failed.`);\n        await this._client.send('Emulation.setGeolocationOverride', {\n            longitude,\n            latitude,\n            accuracy,\n        });\n    }\n    /**\n     * @returns A target this page was created from.\n     */\n    target() {\n        return this._target;\n    }\n    /**\n     * @returns The browser this page belongs to.\n     */\n    browser() {\n        return this._target.browser();\n    }\n    /**\n     * @returns The browser context that the page belongs to\n     */\n    browserContext() {\n        return this._target.browserContext();\n    }\n    _onTargetCrashed() {\n        this.emit('error', new Error('Page crashed!'));\n    }\n    _onLogEntryAdded(event) {\n        const { level, text, args, source, url, lineNumber } = event.entry;\n        if (args)\n            args.map((arg) => helper_js_1.helper.releaseObject(this._client, arg));\n        if (source !== 'worker')\n            this.emit(\"console\" /* Console */, new ConsoleMessage_js_1.ConsoleMessage(level, text, [], [{ url, lineNumber }]));\n    }\n    /**\n     * @returns The page's main frame.\n     */\n    mainFrame() {\n        return this._frameManager.mainFrame();\n    }\n    get keyboard() {\n        return this._keyboard;\n    }\n    get touchscreen() {\n        return this._touchscreen;\n    }\n    get coverage() {\n        return this._coverage;\n    }\n    get tracing() {\n        return this._tracing;\n    }\n    get accessibility() {\n        return this._accessibility;\n    }\n    /**\n     * @returns An array of all frames attached to the page.\n     */\n    frames() {\n        return this._frameManager.frames();\n    }\n    /**\n     * @returns all of the dedicated\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API | WebWorkers}\n     * associated with the page.\n     */\n    workers() {\n        return Array.from(this._workers.values());\n    }\n    /**\n     * @param value - Whether to enable request interception.\n     *\n     * @remarks\n     * Activating request interception enables {@link HTTPRequest.abort},\n     * {@link HTTPRequest.continue} and {@link HTTPRequest.respond} methods.  This\n     * provides the capability to modify network requests that are made by a page.\n     *\n     * Once request interception is enabled, every request will stall unless it's\n     * continued, responded or aborted.\n     *\n     * **NOTE** Enabling request interception disables page caching.\n     *\n     * @example\n     * An example of a naïve request interceptor that aborts all image requests:\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * (async () => {\n     *   const browser = await puppeteer.launch();\n     *   const page = await browser.newPage();\n     *   await page.setRequestInterception(true);\n     *   page.on('request', interceptedRequest => {\n     *     if (interceptedRequest.url().endsWith('.png') ||\n     *         interceptedRequest.url().endsWith('.jpg'))\n     *       interceptedRequest.abort();\n     *     else\n     *       interceptedRequest.continue();\n     *     });\n     *   await page.goto('https://example.com');\n     *   await browser.close();\n     * })();\n     * ```\n     */\n    async setRequestInterception(value) {\n        return this._frameManager.networkManager().setRequestInterception(value);\n    }\n    /**\n     * @param enabled - When `true`, enables offline mode for the page.\n     */\n    setOfflineMode(enabled) {\n        return this._frameManager.networkManager().setOfflineMode(enabled);\n    }\n    /**\n     * @param timeout - Maximum navigation time in milliseconds.\n     */\n    setDefaultNavigationTimeout(timeout) {\n        this._timeoutSettings.setDefaultNavigationTimeout(timeout);\n    }\n    /**\n     * @param timeout - Maximum time in milliseconds.\n     */\n    setDefaultTimeout(timeout) {\n        this._timeoutSettings.setDefaultTimeout(timeout);\n    }\n    /**\n     * Runs `document.querySelector` within the page. If no element matches the\n     * selector, the return value resolves to `null`.\n     *\n     * @remarks\n     * Shortcut for {@link Frame.$ | Page.mainFrame().$(selector) }.\n     *\n     * @param selector - A\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n     * to query page for.\n     */\n    async $(selector) {\n        return this.mainFrame().$(selector);\n    }\n    /**\n     * @remarks\n     *\n     * The only difference between {@link Page.evaluate | page.evaluate} and\n     * `page.evaluateHandle` is that `evaluateHandle` will return the value\n     * wrapped in an in-page object.\n     *\n     * If the function passed to `page.evaluteHandle` returns a Promise, the\n     * function will wait for the promise to resolve and return its value.\n     *\n     * You can pass a string instead of a function (although functions are\n     * recommended as they are easier to debug and use with TypeScript):\n     *\n     * @example\n     * ```\n     * const aHandle = await page.evaluateHandle('document')\n     * ```\n     *\n     * @example\n     * {@link JSHandle} instances can be passed as arguments to the `pageFunction`:\n     * ```\n     * const aHandle = await page.evaluateHandle(() => document.body);\n     * const resultHandle = await page.evaluateHandle(body => body.innerHTML, aHandle);\n     * console.log(await resultHandle.jsonValue());\n     * await resultHandle.dispose();\n     * ```\n     *\n     * Most of the time this function returns a {@link JSHandle},\n     * but if `pageFunction` returns a reference to an element,\n     * you instead get an {@link ElementHandle} back:\n     *\n     * @example\n     * ```\n     * const button = await page.evaluateHandle(() => document.querySelector('button'));\n     * // can call `click` because `button` is an `ElementHandle`\n     * await button.click();\n     * ```\n     *\n     * The TypeScript definitions assume that `evaluateHandle` returns\n     *  a `JSHandle`, but if you know it's going to return an\n     * `ElementHandle`, pass it as the generic argument:\n     *\n     * ```\n     * const button = await page.evaluateHandle<ElementHandle>(...);\n     * ```\n     *\n     * @param pageFunction - a function that is run within the page\n     * @param args - arguments to be passed to the pageFunction\n     */\n    async evaluateHandle(pageFunction, ...args) {\n        const context = await this.mainFrame().executionContext();\n        return context.evaluateHandle(pageFunction, ...args);\n    }\n    /**\n     * This method iterates the JavaScript heap and finds all objects with the\n     * given prototype.\n     *\n     * @remarks\n     *\n     * @example\n     *\n     * ```js\n     * // Create a Map object\n     * await page.evaluate(() => window.map = new Map());\n     * // Get a handle to the Map object prototype\n     * const mapPrototype = await page.evaluateHandle(() => Map.prototype);\n     * // Query all map instances into an array\n     * const mapInstances = await page.queryObjects(mapPrototype);\n     * // Count amount of map objects in heap\n     * const count = await page.evaluate(maps => maps.length, mapInstances);\n     * await mapInstances.dispose();\n     * await mapPrototype.dispose();\n     * ```\n     * @param prototypeHandle - a handle to the object prototype.\n     */\n    async queryObjects(prototypeHandle) {\n        const context = await this.mainFrame().executionContext();\n        return context.queryObjects(prototypeHandle);\n    }\n    /**\n     * This method runs `document.querySelector` within the page and passes the\n     * result as the first argument to the `pageFunction`.\n     *\n     * @remarks\n     *\n     * If no element is found matching `selector`, the method will throw an error.\n     *\n     * If `pageFunction` returns a promise `$eval` will wait for the promise to\n     * resolve and then return its value.\n     *\n     * @example\n     *\n     * ```\n     * const searchValue = await page.$eval('#search', el => el.value);\n     * const preloadHref = await page.$eval('link[rel=preload]', el => el.href);\n     * const html = await page.$eval('.main-container', el => el.outerHTML);\n     * ```\n     *\n     * If you are using TypeScript, you may have to provide an explicit type to the\n     * first argument of the `pageFunction`.\n     * By default it is typed as `Element`, but you may need to provide a more\n     * specific sub-type:\n     *\n     * @example\n     *\n     * ```\n     * // if you don't provide HTMLInputElement here, TS will error\n     * // as `value` is not on `Element`\n     * const searchValue = await page.$eval('#search', (el: HTMLInputElement) => el.value);\n     * ```\n     *\n     * The compiler should be able to infer the return type\n     * from the `pageFunction` you provide. If it is unable to, you can use the generic\n     * type to tell the compiler what return type you expect from `$eval`:\n     *\n     * @example\n     *\n     * ```\n     * // The compiler can infer the return type in this case, but if it can't\n     * // or if you want to be more explicit, provide it as the generic type.\n     * const searchValue = await page.$eval<string>(\n     *  '#search', (el: HTMLInputElement) => el.value\n     * );\n     * ```\n     *\n     * @param selector - the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n     * to query for\n     * @param pageFunction - the function to be evaluated in the page context.\n     * Will be passed the result of `document.querySelector(selector)` as its\n     * first argument.\n     * @param args - any additional arguments to pass through to `pageFunction`.\n     *\n     * @returns The result of calling `pageFunction`. If it returns an element it\n     * is wrapped in an {@link ElementHandle}, else the raw value itself is\n     * returned.\n     */\n    async $eval(selector, pageFunction, ...args) {\n        return this.mainFrame().$eval(selector, pageFunction, ...args);\n    }\n    /**\n     * This method runs `Array.from(document.querySelectorAll(selector))` within\n     * the page and passes the result as the first argument to the `pageFunction`.\n     *\n     * @remarks\n     *\n     * If `pageFunction` returns a promise `$$eval` will wait for the promise to\n     * resolve and then return its value.\n     *\n     * @example\n     *\n     * ```\n     * // get the amount of divs on the page\n     * const divCount = await page.$$eval('div', divs => divs.length);\n     *\n     * // get the text content of all the `.options` elements:\n     * const options = await page.$$eval('div > span.options', options => {\n     *   return options.map(option => option.textContent)\n     * });\n     * ```\n     *\n     * If you are using TypeScript, you may have to provide an explicit type to the\n     * first argument of the `pageFunction`.\n     * By default it is typed as `Element[]`, but you may need to provide a more\n     * specific sub-type:\n     *\n     * @example\n     *\n     * ```\n     * // if you don't provide HTMLInputElement here, TS will error\n     * // as `value` is not on `Element`\n     * await page.$$eval('input', (elements: HTMLInputElement[]) => {\n     *   return elements.map(e => e.value);\n     * });\n     * ```\n     *\n     * The compiler should be able to infer the return type\n     * from the `pageFunction` you provide. If it is unable to, you can use the generic\n     * type to tell the compiler what return type you expect from `$$eval`:\n     *\n     * @example\n     *\n     * ```\n     * // The compiler can infer the return type in this case, but if it can't\n     * // or if you want to be more explicit, provide it as the generic type.\n     * const allInputValues = await page.$$eval<string[]>(\n     *  'input', (elements: HTMLInputElement[]) => elements.map(e => e.textContent)\n     * );\n     * ```\n     *\n     * @param selector the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n     * to query for\n     * @param pageFunction the function to be evaluated in the page context. Will\n     * be passed the result of `Array.from(document.querySelectorAll(selector))`\n     * as its first argument.\n     * @param args any additional arguments to pass through to `pageFunction`.\n     *\n     * @returns The result of calling `pageFunction`. If it returns an element it\n     * is wrapped in an {@link ElementHandle}, else the raw value itself is\n     * returned.\n     */\n    async $$eval(selector, pageFunction, ...args) {\n        return this.mainFrame().$$eval(selector, pageFunction, ...args);\n    }\n    async $$(selector) {\n        return this.mainFrame().$$(selector);\n    }\n    async $x(expression) {\n        return this.mainFrame().$x(expression);\n    }\n    /**\n     * If no URLs are specified, this method returns cookies for the current page\n     * URL. If URLs are specified, only cookies for those URLs are returned.\n     */\n    async cookies(...urls) {\n        const originalCookies = (await this._client.send('Network.getCookies', {\n            urls: urls.length ? urls : [this.url()],\n        })).cookies;\n        const unsupportedCookieAttributes = ['priority'];\n        const filterUnsupportedAttributes = (cookie) => {\n            for (const attr of unsupportedCookieAttributes)\n                delete cookie[attr];\n            return cookie;\n        };\n        return originalCookies.map(filterUnsupportedAttributes);\n    }\n    async deleteCookie(...cookies) {\n        const pageURL = this.url();\n        for (const cookie of cookies) {\n            const item = Object.assign({}, cookie);\n            if (!cookie.url && pageURL.startsWith('http'))\n                item.url = pageURL;\n            await this._client.send('Network.deleteCookies', item);\n        }\n    }\n    async setCookie(...cookies) {\n        const pageURL = this.url();\n        const startsWithHTTP = pageURL.startsWith('http');\n        const items = cookies.map((cookie) => {\n            const item = Object.assign({}, cookie);\n            if (!item.url && startsWithHTTP)\n                item.url = pageURL;\n            assert_js_1.assert(item.url !== 'about:blank', `Blank page can not have cookie \"${item.name}\"`);\n            assert_js_1.assert(!String.prototype.startsWith.call(item.url || '', 'data:'), `Data URL page can not have cookie \"${item.name}\"`);\n            return item;\n        });\n        await this.deleteCookie(...items);\n        if (items.length)\n            await this._client.send('Network.setCookies', { cookies: items });\n    }\n    async addScriptTag(options) {\n        return this.mainFrame().addScriptTag(options);\n    }\n    async addStyleTag(options) {\n        return this.mainFrame().addStyleTag(options);\n    }\n    async exposeFunction(name, puppeteerFunction) {\n        if (this._pageBindings.has(name))\n            throw new Error(`Failed to add page binding with name ${name}: window['${name}'] already exists!`);\n        this._pageBindings.set(name, puppeteerFunction);\n        const expression = helper_js_1.helper.pageBindingInitString('exposedFun', name);\n        await this._client.send('Runtime.addBinding', { name: name });\n        await this._client.send('Page.addScriptToEvaluateOnNewDocument', {\n            source: expression,\n        });\n        await Promise.all(this.frames().map((frame) => frame.evaluate(expression).catch(helper_js_1.debugError)));\n    }\n    async authenticate(credentials) {\n        return this._frameManager.networkManager().authenticate(credentials);\n    }\n    async setExtraHTTPHeaders(headers) {\n        return this._frameManager.networkManager().setExtraHTTPHeaders(headers);\n    }\n    async setUserAgent(userAgent) {\n        return this._frameManager.networkManager().setUserAgent(userAgent);\n    }\n    async metrics() {\n        const response = await this._client.send('Performance.getMetrics');\n        return this._buildMetricsObject(response.metrics);\n    }\n    _emitMetrics(event) {\n        this.emit(\"metrics\" /* Metrics */, {\n            title: event.title,\n            metrics: this._buildMetricsObject(event.metrics),\n        });\n    }\n    _buildMetricsObject(metrics) {\n        const result = {};\n        for (const metric of metrics || []) {\n            if (supportedMetrics.has(metric.name))\n                result[metric.name] = metric.value;\n        }\n        return result;\n    }\n    _handleException(exceptionDetails) {\n        const message = helper_js_1.helper.getExceptionMessage(exceptionDetails);\n        const err = new Error(message);\n        err.stack = ''; // Don't report clientside error with a node stack attached\n        this.emit(\"pageerror\" /* PageError */, err);\n    }\n    async _onConsoleAPI(event) {\n        if (event.executionContextId === 0) {\n            // DevTools protocol stores the last 1000 console messages. These\n            // messages are always reported even for removed execution contexts. In\n            // this case, they are marked with executionContextId = 0 and are\n            // reported upon enabling Runtime agent.\n            //\n            // Ignore these messages since:\n            // - there's no execution context we can use to operate with message\n            //   arguments\n            // - these messages are reported before Puppeteer clients can subscribe\n            //   to the 'console'\n            //   page event.\n            //\n            // @see https://github.com/puppeteer/puppeteer/issues/3865\n            return;\n        }\n        const context = this._frameManager.executionContextById(event.executionContextId);\n        const values = event.args.map((arg) => JSHandle_js_1.createJSHandle(context, arg));\n        this._addConsoleMessage(event.type, values, event.stackTrace);\n    }\n    async _onBindingCalled(event) {\n        let payload;\n        try {\n            payload = JSON.parse(event.payload);\n        }\n        catch {\n            // The binding was either called by something in the page or it was\n            // called before our wrapper was initialized.\n            return;\n        }\n        const { type, name, seq, args } = payload;\n        if (type !== 'exposedFun' || !this._pageBindings.has(name))\n            return;\n        let expression = null;\n        try {\n            const result = await this._pageBindings.get(name)(...args);\n            expression = helper_js_1.helper.pageBindingDeliverResultString(name, seq, result);\n        }\n        catch (error) {\n            if (error instanceof Error)\n                expression = helper_js_1.helper.pageBindingDeliverErrorString(name, seq, error.message, error.stack);\n            else\n                expression = helper_js_1.helper.pageBindingDeliverErrorValueString(name, seq, error);\n        }\n        this._client\n            .send('Runtime.evaluate', {\n            expression,\n            contextId: event.executionContextId,\n        })\n            .catch(helper_js_1.debugError);\n    }\n    _addConsoleMessage(type, args, stackTrace) {\n        if (!this.listenerCount(\"console\" /* Console */)) {\n            args.forEach((arg) => arg.dispose());\n            return;\n        }\n        const textTokens = [];\n        for (const arg of args) {\n            const remoteObject = arg._remoteObject;\n            if (remoteObject.objectId)\n                textTokens.push(arg.toString());\n            else\n                textTokens.push(helper_js_1.helper.valueFromRemoteObject(remoteObject));\n        }\n        const stackTraceLocations = [];\n        if (stackTrace) {\n            for (const callFrame of stackTrace.callFrames) {\n                stackTraceLocations.push({\n                    url: callFrame.url,\n                    lineNumber: callFrame.lineNumber,\n                    columnNumber: callFrame.columnNumber,\n                });\n            }\n        }\n        const message = new ConsoleMessage_js_1.ConsoleMessage(type, textTokens.join(' '), args, stackTraceLocations);\n        this.emit(\"console\" /* Console */, message);\n    }\n    _onDialog(event) {\n        let dialogType = null;\n        const validDialogTypes = new Set([\n            'alert',\n            'confirm',\n            'prompt',\n            'beforeunload',\n        ]);\n        if (validDialogTypes.has(event.type)) {\n            dialogType = event.type;\n        }\n        assert_js_1.assert(dialogType, 'Unknown javascript dialog type: ' + event.type);\n        const dialog = new Dialog_js_1.Dialog(this._client, dialogType, event.message, event.defaultPrompt);\n        this.emit(\"dialog\" /* Dialog */, dialog);\n    }\n    url() {\n        return this.mainFrame().url();\n    }\n    async content() {\n        return await this._frameManager.mainFrame().content();\n    }\n    async setContent(html, options = {}) {\n        await this._frameManager.mainFrame().setContent(html, options);\n    }\n    async goto(url, options = {}) {\n        return await this._frameManager.mainFrame().goto(url, options);\n    }\n    async reload(options) {\n        const result = await Promise.all([\n            this.waitForNavigation(options),\n            this._client.send('Page.reload'),\n        ]);\n        return result[0];\n    }\n    async waitForNavigation(options = {}) {\n        return await this._frameManager.mainFrame().waitForNavigation(options);\n    }\n    _sessionClosePromise() {\n        if (!this._disconnectPromise)\n            this._disconnectPromise = new Promise((fulfill) => this._client.once(Connection_js_1.CDPSessionEmittedEvents.Disconnected, () => fulfill(new Error('Target closed'))));\n        return this._disconnectPromise;\n    }\n    async waitForRequest(urlOrPredicate, options = {}) {\n        const { timeout = this._timeoutSettings.timeout() } = options;\n        return helper_js_1.helper.waitForEvent(this._frameManager.networkManager(), NetworkManager_js_1.NetworkManagerEmittedEvents.Request, (request) => {\n            if (helper_js_1.helper.isString(urlOrPredicate))\n                return urlOrPredicate === request.url();\n            if (typeof urlOrPredicate === 'function')\n                return !!urlOrPredicate(request);\n            return false;\n        }, timeout, this._sessionClosePromise());\n    }\n    async waitForResponse(urlOrPredicate, options = {}) {\n        const { timeout = this._timeoutSettings.timeout() } = options;\n        return helper_js_1.helper.waitForEvent(this._frameManager.networkManager(), NetworkManager_js_1.NetworkManagerEmittedEvents.Response, (response) => {\n            if (helper_js_1.helper.isString(urlOrPredicate))\n                return urlOrPredicate === response.url();\n            if (typeof urlOrPredicate === 'function')\n                return !!urlOrPredicate(response);\n            return false;\n        }, timeout, this._sessionClosePromise());\n    }\n    async goBack(options = {}) {\n        return this._go(-1, options);\n    }\n    async goForward(options = {}) {\n        return this._go(+1, options);\n    }\n    async _go(delta, options) {\n        const history = await this._client.send('Page.getNavigationHistory');\n        const entry = history.entries[history.currentIndex + delta];\n        if (!entry)\n            return null;\n        const result = await Promise.all([\n            this.waitForNavigation(options),\n            this._client.send('Page.navigateToHistoryEntry', { entryId: entry.id }),\n        ]);\n        return result[0];\n    }\n    async bringToFront() {\n        await this._client.send('Page.bringToFront');\n    }\n    async emulate(options) {\n        await Promise.all([\n            this.setViewport(options.viewport),\n            this.setUserAgent(options.userAgent),\n        ]);\n    }\n    async setJavaScriptEnabled(enabled) {\n        if (this._javascriptEnabled === enabled)\n            return;\n        this._javascriptEnabled = enabled;\n        await this._client.send('Emulation.setScriptExecutionDisabled', {\n            value: !enabled,\n        });\n    }\n    async setBypassCSP(enabled) {\n        await this._client.send('Page.setBypassCSP', { enabled });\n    }\n    async emulateMediaType(type) {\n        assert_js_1.assert(type === 'screen' || type === 'print' || type === null, 'Unsupported media type: ' + type);\n        await this._client.send('Emulation.setEmulatedMedia', {\n            media: type || '',\n        });\n    }\n    async emulateMediaFeatures(features) {\n        if (features === null)\n            await this._client.send('Emulation.setEmulatedMedia', { features: null });\n        if (Array.isArray(features)) {\n            features.every((mediaFeature) => {\n                const name = mediaFeature.name;\n                assert_js_1.assert(/^prefers-(?:color-scheme|reduced-motion)$/.test(name), 'Unsupported media feature: ' + name);\n                return true;\n            });\n            await this._client.send('Emulation.setEmulatedMedia', {\n                features: features,\n            });\n        }\n    }\n    async emulateTimezone(timezoneId) {\n        try {\n            await this._client.send('Emulation.setTimezoneOverride', {\n                timezoneId: timezoneId || '',\n            });\n        }\n        catch (error) {\n            if (error.message.includes('Invalid timezone'))\n                throw new Error(`Invalid timezone ID: ${timezoneId}`);\n            throw error;\n        }\n    }\n    /**\n     * Emulates the idle state.\n     * If no arguments set, clears idle state emulation.\n     *\n     * @example\n     * ```js\n     * // set idle emulation\n     * await page.emulateIdleState({isUserActive: true, isScreenUnlocked: false});\n     *\n     * // do some checks here\n     * ...\n     *\n     * // clear idle emulation\n     * await page.emulateIdleState();\n     * ```\n     *\n     * @param overrides Mock idle state. If not set, clears idle overrides\n     * @param isUserActive Mock isUserActive\n     * @param isScreenUnlocked Mock isScreenUnlocked\n     */\n    async emulateIdleState(overrides) {\n        if (overrides) {\n            await this._client.send('Emulation.setIdleOverride', {\n                isUserActive: overrides.isUserActive,\n                isScreenUnlocked: overrides.isScreenUnlocked,\n            });\n        }\n        else {\n            await this._client.send('Emulation.clearIdleOverride');\n        }\n    }\n    /**\n     * Simulates the given vision deficiency on the page.\n     *\n     * @example\n     * ```js\n     * const puppeteer = require('puppeteer');\n     *\n     * (async () => {\n     *   const browser = await puppeteer.launch();\n     *   const page = await browser.newPage();\n     *   await page.goto('https://v8.dev/blog/10-years');\n     *\n     *   await page.emulateVisionDeficiency('achromatopsia');\n     *   await page.screenshot({ path: 'achromatopsia.png' });\n     *\n     *   await page.emulateVisionDeficiency('deuteranopia');\n     *   await page.screenshot({ path: 'deuteranopia.png' });\n     *\n     *   await page.emulateVisionDeficiency('blurredVision');\n     *   await page.screenshot({ path: 'blurred-vision.png' });\n     *\n     *   await browser.close();\n     * })();\n     * ```\n     *\n     * @param type - the type of deficiency to simulate, or `'none'` to reset.\n     */\n    async emulateVisionDeficiency(type) {\n        const visionDeficiencies = new Set([\n            'none',\n            'achromatopsia',\n            'blurredVision',\n            'deuteranopia',\n            'protanopia',\n            'tritanopia',\n        ]);\n        try {\n            assert_js_1.assert(!type || visionDeficiencies.has(type), `Unsupported vision deficiency: ${type}`);\n            await this._client.send('Emulation.setEmulatedVisionDeficiency', {\n                type: type || 'none',\n            });\n        }\n        catch (error) {\n            throw error;\n        }\n    }\n    async setViewport(viewport) {\n        const needsReload = await this._emulationManager.emulateViewport(viewport);\n        this._viewport = viewport;\n        if (needsReload)\n            await this.reload();\n    }\n    viewport() {\n        return this._viewport;\n    }\n    /**\n     * @remarks\n     *\n     * Evaluates a function in the page's context and returns the result.\n     *\n     * If the function passed to `page.evaluteHandle` returns a Promise, the\n     * function will wait for the promise to resolve and return its value.\n     *\n     * @example\n     *\n     * ```js\n     * const result = await frame.evaluate(() => {\n     *   return Promise.resolve(8 * 7);\n     * });\n     * console.log(result); // prints \"56\"\n     * ```\n     *\n     * You can pass a string instead of a function (although functions are\n     * recommended as they are easier to debug and use with TypeScript):\n     *\n     * @example\n     * ```\n     * const aHandle = await page.evaluate('1 + 2');\n     * ```\n     *\n     * To get the best TypeScript experience, you should pass in as the\n     * generic the type of `pageFunction`:\n     *\n     * ```\n     * const aHandle = await page.evaluate<() => number>(() => 2);\n     * ```\n     *\n     * @example\n     *\n     * {@link ElementHandle} instances (including {@link JSHandle}s) can be passed\n     * as arguments to the `pageFunction`:\n     *\n     * ```\n     * const bodyHandle = await page.$('body');\n     * const html = await page.evaluate(body => body.innerHTML, bodyHandle);\n     * await bodyHandle.dispose();\n     * ```\n     *\n     * @param pageFunction - a function that is run within the page\n     * @param args - arguments to be passed to the pageFunction\n     *\n     * @returns the return value of `pageFunction`.\n     */\n    async evaluate(pageFunction, ...args) {\n        return this._frameManager.mainFrame().evaluate(pageFunction, ...args);\n    }\n    async evaluateOnNewDocument(pageFunction, ...args) {\n        const source = helper_js_1.helper.evaluationString(pageFunction, ...args);\n        await this._client.send('Page.addScriptToEvaluateOnNewDocument', {\n            source,\n        });\n    }\n    async setCacheEnabled(enabled = true) {\n        await this._frameManager.networkManager().setCacheEnabled(enabled);\n    }\n    async screenshot(options = {}) {\n        let screenshotType = null;\n        // options.type takes precedence over inferring the type from options.path\n        // because it may be a 0-length file with no extension created beforehand\n        // (i.e. as a temp file).\n        if (options.type) {\n            assert_js_1.assert(options.type === 'png' || options.type === 'jpeg', 'Unknown options.type value: ' + options.type);\n            screenshotType = options.type;\n        }\n        else if (options.path) {\n            const filePath = options.path;\n            const extension = filePath\n                .slice(filePath.lastIndexOf('.') + 1)\n                .toLowerCase();\n            if (extension === 'png')\n                screenshotType = 'png';\n            else if (extension === 'jpg' || extension === 'jpeg')\n                screenshotType = 'jpeg';\n            assert_js_1.assert(screenshotType, `Unsupported screenshot type for extension \\`.${extension}\\``);\n        }\n        if (!screenshotType)\n            screenshotType = 'png';\n        if (options.quality) {\n            assert_js_1.assert(screenshotType === 'jpeg', 'options.quality is unsupported for the ' +\n                screenshotType +\n                ' screenshots');\n            assert_js_1.assert(typeof options.quality === 'number', 'Expected options.quality to be a number but found ' +\n                typeof options.quality);\n            assert_js_1.assert(Number.isInteger(options.quality), 'Expected options.quality to be an integer');\n            assert_js_1.assert(options.quality >= 0 && options.quality <= 100, 'Expected options.quality to be between 0 and 100 (inclusive), got ' +\n                options.quality);\n        }\n        assert_js_1.assert(!options.clip || !options.fullPage, 'options.clip and options.fullPage are exclusive');\n        if (options.clip) {\n            assert_js_1.assert(typeof options.clip.x === 'number', 'Expected options.clip.x to be a number but found ' +\n                typeof options.clip.x);\n            assert_js_1.assert(typeof options.clip.y === 'number', 'Expected options.clip.y to be a number but found ' +\n                typeof options.clip.y);\n            assert_js_1.assert(typeof options.clip.width === 'number', 'Expected options.clip.width to be a number but found ' +\n                typeof options.clip.width);\n            assert_js_1.assert(typeof options.clip.height === 'number', 'Expected options.clip.height to be a number but found ' +\n                typeof options.clip.height);\n            assert_js_1.assert(options.clip.width !== 0, 'Expected options.clip.width not to be 0.');\n            assert_js_1.assert(options.clip.height !== 0, 'Expected options.clip.height not to be 0.');\n        }\n        return this._screenshotTaskQueue.postTask(() => this._screenshotTask(screenshotType, options));\n    }\n    async _screenshotTask(format, options) {\n        await this._client.send('Target.activateTarget', {\n            targetId: this._target._targetId,\n        });\n        let clip = options.clip ? processClip(options.clip) : undefined;\n        if (options.fullPage) {\n            const metrics = await this._client.send('Page.getLayoutMetrics');\n            const width = Math.ceil(metrics.contentSize.width);\n            const height = Math.ceil(metrics.contentSize.height);\n            // Overwrite clip for full page at all times.\n            clip = { x: 0, y: 0, width, height, scale: 1 };\n            const { isMobile = false, deviceScaleFactor = 1, isLandscape = false } = this._viewport || {};\n            const screenOrientation = isLandscape\n                ? { angle: 90, type: 'landscapePrimary' }\n                : { angle: 0, type: 'portraitPrimary' };\n            await this._client.send('Emulation.setDeviceMetricsOverride', {\n                mobile: isMobile,\n                width,\n                height,\n                deviceScaleFactor,\n                screenOrientation,\n            });\n        }\n        const shouldSetDefaultBackground = options.omitBackground && format === 'png';\n        if (shouldSetDefaultBackground)\n            await this._client.send('Emulation.setDefaultBackgroundColorOverride', {\n                color: { r: 0, g: 0, b: 0, a: 0 },\n            });\n        const result = await this._client.send('Page.captureScreenshot', {\n            format,\n            quality: options.quality,\n            clip,\n        });\n        if (shouldSetDefaultBackground)\n            await this._client.send('Emulation.setDefaultBackgroundColorOverride');\n        if (options.fullPage && this._viewport)\n            await this.setViewport(this._viewport);\n        const buffer = options.encoding === 'base64'\n            ? result.data\n            : Buffer.from(result.data, 'base64');\n        if (!environment_js_1.isNode && options.path) {\n            throw new Error('Screenshots can only be written to a file path in a Node environment.');\n        }\n        const fs = await helper_js_1.helper.importFSModule();\n        if (options.path)\n            await fs.promises.writeFile(options.path, buffer);\n        return buffer;\n        function processClip(clip) {\n            const x = Math.round(clip.x);\n            const y = Math.round(clip.y);\n            const width = Math.round(clip.width + clip.x - x);\n            const height = Math.round(clip.height + clip.y - y);\n            return { x, y, width, height, scale: 1 };\n        }\n    }\n    /**\n     * Generatees a PDF of the page with the `print` CSS media type.\n     * @remarks\n     *\n     * IMPORTANT: PDF generation is only supported in Chrome headless mode.\n     *\n     * To generate a PDF with the `screen` media type, call\n     * {@link Page.emulateMediaType | `page.emulateMediaType('screen')`} before\n     * calling `page.pdf()`.\n     *\n     * By default, `page.pdf()` generates a pdf with modified colors for printing.\n     * Use the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-print-color-adjust | `-webkit-print-color-adjust`}\n     * property to force rendering of exact colors.\n     *\n     *\n     * @param options - options for generating the PDF.\n     */\n    async pdf(options = {}) {\n        const { scale = 1, displayHeaderFooter = false, headerTemplate = '', footerTemplate = '', printBackground = false, landscape = false, pageRanges = '', preferCSSPageSize = false, margin = {}, path = null, } = options;\n        let paperWidth = 8.5;\n        let paperHeight = 11;\n        if (options.format) {\n            const format = PDFOptions_js_1.paperFormats[options.format.toLowerCase()];\n            assert_js_1.assert(format, 'Unknown paper format: ' + options.format);\n            paperWidth = format.width;\n            paperHeight = format.height;\n        }\n        else {\n            paperWidth = convertPrintParameterToInches(options.width) || paperWidth;\n            paperHeight =\n                convertPrintParameterToInches(options.height) || paperHeight;\n        }\n        const marginTop = convertPrintParameterToInches(margin.top) || 0;\n        const marginLeft = convertPrintParameterToInches(margin.left) || 0;\n        const marginBottom = convertPrintParameterToInches(margin.bottom) || 0;\n        const marginRight = convertPrintParameterToInches(margin.right) || 0;\n        const result = await this._client.send('Page.printToPDF', {\n            transferMode: 'ReturnAsStream',\n            landscape,\n            displayHeaderFooter,\n            headerTemplate,\n            footerTemplate,\n            printBackground,\n            scale,\n            paperWidth,\n            paperHeight,\n            marginTop,\n            marginBottom,\n            marginLeft,\n            marginRight,\n            pageRanges,\n            preferCSSPageSize,\n        });\n        return await helper_js_1.helper.readProtocolStream(this._client, result.stream, path);\n    }\n    async title() {\n        return this.mainFrame().title();\n    }\n    async close(options = { runBeforeUnload: undefined }) {\n        assert_js_1.assert(!!this._client._connection, 'Protocol error: Connection closed. Most likely the page has been closed.');\n        const runBeforeUnload = !!options.runBeforeUnload;\n        if (runBeforeUnload) {\n            await this._client.send('Page.close');\n        }\n        else {\n            await this._client._connection.send('Target.closeTarget', {\n                targetId: this._target._targetId,\n            });\n            await this._target._isClosedPromise;\n        }\n    }\n    isClosed() {\n        return this._closed;\n    }\n    get mouse() {\n        return this._mouse;\n    }\n    click(selector, options = {}) {\n        return this.mainFrame().click(selector, options);\n    }\n    focus(selector) {\n        return this.mainFrame().focus(selector);\n    }\n    hover(selector) {\n        return this.mainFrame().hover(selector);\n    }\n    select(selector, ...values) {\n        return this.mainFrame().select(selector, ...values);\n    }\n    tap(selector) {\n        return this.mainFrame().tap(selector);\n    }\n    type(selector, text, options) {\n        return this.mainFrame().type(selector, text, options);\n    }\n    /**\n     * @remarks\n     *\n     * This method behaves differently depending on the first parameter. If it's a\n     * `string`, it will be treated as a `selector` or `xpath` (if the string\n     * starts with `//`). This method then is a shortcut for\n     * {@link Page.waitForSelector} or {@link Page.waitForXPath}.\n     *\n     * If the first argument is a function this method is a shortcut for\n     * {@link Page.waitForFunction}.\n     *\n     * If the first argument is a `number`, it's treated as a timeout in\n     * milliseconds and the method returns a promise which resolves after the\n     * timeout.\n     *\n     * @param selectorOrFunctionOrTimeout - a selector, predicate or timeout to\n     * wait for.\n     * @param options - optional waiting parameters.\n     * @param args - arguments to pass to `pageFunction`.\n     *\n     * @deprecated Don't use this method directly. Instead use the more explicit\n     * methods available: {@link Page.waitForSelector},\n     * {@link Page.waitForXPath}, {@link Page.waitForFunction} or\n     * {@link Page.waitForTimeout}.\n     */\n    waitFor(selectorOrFunctionOrTimeout, options = {}, ...args) {\n        return this.mainFrame().waitFor(selectorOrFunctionOrTimeout, options, ...args);\n    }\n    /**\n     * Causes your script to wait for the given number of milliseconds.\n     *\n     * @remarks\n     *\n     * It's generally recommended to not wait for a number of seconds, but instead\n     * use {@link Page.waitForSelector}, {@link Page.waitForXPath} or\n     * {@link Page.waitForFunction} to wait for exactly the conditions you want.\n     *\n     * @example\n     *\n     * Wait for 1 second:\n     *\n     * ```\n     * await page.waitForTimeout(1000);\n     * ```\n     *\n     * @param milliseconds - the number of milliseconds to wait.\n     */\n    waitForTimeout(milliseconds) {\n        return this.mainFrame().waitForTimeout(milliseconds);\n    }\n    waitForSelector(selector, options = {}) {\n        return this.mainFrame().waitForSelector(selector, options);\n    }\n    waitForXPath(xpath, options = {}) {\n        return this.mainFrame().waitForXPath(xpath, options);\n    }\n    waitForFunction(pageFunction, options = {}, ...args) {\n        return this.mainFrame().waitForFunction(pageFunction, options, ...args);\n    }\n}\nexports.Page = Page;\nconst supportedMetrics = new Set([\n    'Timestamp',\n    'Documents',\n    'Frames',\n    'JSEventListeners',\n    'Nodes',\n    'LayoutCount',\n    'RecalcStyleCount',\n    'LayoutDuration',\n    'RecalcStyleDuration',\n    'ScriptDuration',\n    'TaskDuration',\n    'JSHeapUsedSize',\n    'JSHeapTotalSize',\n]);\nconst unitToPixels = {\n    px: 1,\n    in: 96,\n    cm: 37.8,\n    mm: 3.78,\n};\nfunction convertPrintParameterToInches(parameter) {\n    if (typeof parameter === 'undefined')\n        return undefined;\n    let pixels;\n    if (helper_js_1.helper.isNumber(parameter)) {\n        // Treat numbers as pixel values to be aligned with phantom's paperSize.\n        pixels = /** @type {number} */ parameter;\n    }\n    else if (helper_js_1.helper.isString(parameter)) {\n        const text = /** @type {string} */ parameter;\n        let unit = text.substring(text.length - 2).toLowerCase();\n        let valueText = '';\n        if (unitToPixels.hasOwnProperty(unit)) {\n            valueText = text.substring(0, text.length - 2);\n        }\n        else {\n            // In case of unknown unit try to parse the whole parameter as number of pixels.\n            // This is consistent with phantom's paperSize behavior.\n            unit = 'px';\n            valueText = text;\n        }\n        const value = Number(valueText);\n        assert_js_1.assert(!isNaN(value), 'Failed to parse parameter value: ' + text);\n        pixels = value * unitToPixels[unit];\n    }\n    else {\n        throw new Error('page.pdf() Cannot handle parameter type: ' + typeof parameter);\n    }\n    return pixels / 96;\n}\n"]},"metadata":{},"sourceType":"script"}