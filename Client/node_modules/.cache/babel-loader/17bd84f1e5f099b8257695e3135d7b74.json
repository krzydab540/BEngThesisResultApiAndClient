{"ast":null,"code":"var __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport { CLEANUP_TIMER_LOOP_MILLIS, createTrackingData } from \"./reactionCleanupTrackingCommon\";\n/**\r\n * timers, gc-style, uncommitted reaction cleanup\r\n */\n\nexport function createTimerBasedReactionCleanupTracking() {\n  /**\r\n   * Reactions created by components that have yet to be fully mounted.\r\n   */\n  var uncommittedReactionRefs = new Set();\n  /**\r\n   * Latest 'uncommitted reactions' cleanup timer handle.\r\n   */\n\n  var reactionCleanupHandle;\n  /* istanbul ignore next */\n\n  /**\r\n   * Only to be used by test functions; do not export outside of mobx-react-lite\r\n   */\n\n  function forceCleanupTimerToRunNowForTests() {\n    // This allows us to control the execution of the cleanup timer\n    // to force it to run at awkward times in unit tests.\n    if (reactionCleanupHandle) {\n      clearTimeout(reactionCleanupHandle);\n      cleanUncommittedReactions();\n    }\n  }\n  /* istanbul ignore next */\n\n\n  function resetCleanupScheduleForTests() {\n    var e_1, _a;\n\n    if (uncommittedReactionRefs.size > 0) {\n      try {\n        for (var uncommittedReactionRefs_1 = __values(uncommittedReactionRefs), uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next(); !uncommittedReactionRefs_1_1.done; uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next()) {\n          var ref = uncommittedReactionRefs_1_1.value;\n          var tracking = ref.current;\n\n          if (tracking) {\n            tracking.reaction.dispose();\n            ref.current = null;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (uncommittedReactionRefs_1_1 && !uncommittedReactionRefs_1_1.done && (_a = uncommittedReactionRefs_1.return)) _a.call(uncommittedReactionRefs_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      uncommittedReactionRefs.clear();\n    }\n\n    if (reactionCleanupHandle) {\n      clearTimeout(reactionCleanupHandle);\n      reactionCleanupHandle = undefined;\n    }\n  }\n\n  function ensureCleanupTimerRunning() {\n    if (reactionCleanupHandle === undefined) {\n      reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);\n    }\n  }\n\n  function scheduleCleanupOfReactionIfLeaked(ref) {\n    uncommittedReactionRefs.add(ref);\n    ensureCleanupTimerRunning();\n  }\n\n  function recordReactionAsCommitted(reactionRef) {\n    uncommittedReactionRefs.delete(reactionRef);\n  }\n  /**\r\n   * Run by the cleanup timer to dispose any outstanding reactions\r\n   */\n\n\n  function cleanUncommittedReactions() {\n    reactionCleanupHandle = undefined; // Loop through all the candidate leaked reactions; those older\n    // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\n\n    var now = Date.now();\n    uncommittedReactionRefs.forEach(function (ref) {\n      var tracking = ref.current;\n\n      if (tracking) {\n        if (now >= tracking.cleanAt) {\n          // It's time to tidy up this leaked reaction.\n          tracking.reaction.dispose();\n          ref.current = null;\n          uncommittedReactionRefs.delete(ref);\n        }\n      }\n    });\n\n    if (uncommittedReactionRefs.size > 0) {\n      // We've just finished a round of cleanups but there are still\n      // some leak candidates outstanding.\n      ensureCleanupTimerRunning();\n    }\n  }\n\n  return {\n    addReactionToTrack: function (reactionTrackingRef, reaction,\n    /**\r\n     * On timer based implementation we don't really need this object,\r\n     * but we keep the same api\r\n     */\n    objectRetainedByReact) {\n      reactionTrackingRef.current = createTrackingData(reaction);\n      scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);\n      return reactionTrackingRef.current;\n    },\n    recordReactionAsCommitted: recordReactionAsCommitted,\n    forceCleanupTimerToRunNowForTests: forceCleanupTimerToRunNowForTests,\n    resetCleanupScheduleForTests: resetCleanupScheduleForTests\n  };\n}","map":{"version":3,"sources":["../../src/utils/createTimerBasedReactionCleanupTracking.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AACA,SAGI,yBAHJ,EAII,kBAJJ,QAKO,iCALP;AAOA;;AAEG;;AACH,OAAM,SAAU,uCAAV,GAAiD;AACnD;;AAEG;AACH,MAAM,uBAAuB,GAA0D,IAAI,GAAJ,EAAvF;AAEA;;AAEG;;AACH,MAAI,qBAAJ;AAEA;;AACA;;AAEG;;AACH,WAAS,iCAAT,GAA0C;AACtC;AACA;AACA,QAAI,qBAAJ,EAA2B;AACvB,MAAA,YAAY,CAAC,qBAAD,CAAZ;AACA,MAAA,yBAAyB;AAC5B;AACJ;AAED;;;AACA,WAAS,4BAAT,GAAqC;;;AACjC,QAAI,uBAAuB,CAAC,IAAxB,GAA+B,CAAnC,EAAsC;;AAClC,aAAkB,IAAA,yBAAA,GAAA,QAAA,CAAA,uBAAA,CAAA,EAAuB,2BAAA,GAAA,yBAAA,CAAA,IAAA,EAAzC,EAAyC,CAAA,2BAAA,CAAA,IAAzC,EAAyC,2BAAA,GAAA,yBAAA,CAAA,IAAA,EAAzC,EAA2C;AAAtC,cAAM,GAAG,GAAA,2BAAA,CAAA,KAAT;AACD,cAAM,QAAQ,GAAG,GAAG,CAAC,OAArB;;AACA,cAAI,QAAJ,EAAc;AACV,YAAA,QAAQ,CAAC,QAAT,CAAkB,OAAlB;AACA,YAAA,GAAG,CAAC,OAAJ,GAAc,IAAd;AACH;AACJ;;;;;;;;;;;;;AACD,MAAA,uBAAuB,CAAC,KAAxB;AACH;;AAED,QAAI,qBAAJ,EAA2B;AACvB,MAAA,YAAY,CAAC,qBAAD,CAAZ;AACA,MAAA,qBAAqB,GAAG,SAAxB;AACH;AACJ;;AAED,WAAS,yBAAT,GAAkC;AAC9B,QAAI,qBAAqB,KAAK,SAA9B,EAAyC;AACrC,MAAA,qBAAqB,GAAG,UAAU,CAAC,yBAAD,EAA4B,yBAA5B,CAAlC;AACH;AACJ;;AAED,WAAS,iCAAT,CACI,GADJ,EACyD;AAErD,IAAA,uBAAuB,CAAC,GAAxB,CAA4B,GAA5B;AAEA,IAAA,yBAAyB;AAC5B;;AAED,WAAS,yBAAT,CACI,WADJ,EACiE;AAE7D,IAAA,uBAAuB,CAAC,MAAxB,CAA+B,WAA/B;AACH;AAED;;AAEG;;;AACH,WAAS,yBAAT,GAAkC;AAC9B,IAAA,qBAAqB,GAAG,SAAxB,CAD8B,CAG9B;AACA;;AAEA,QAAM,GAAG,GAAG,IAAI,CAAC,GAAL,EAAZ;AACA,IAAA,uBAAuB,CAAC,OAAxB,CAAgC,UAAA,GAAA,EAAG;AAC/B,UAAM,QAAQ,GAAG,GAAG,CAAC,OAArB;;AACA,UAAI,QAAJ,EAAc;AACV,YAAI,GAAG,IAAI,QAAQ,CAAC,OAApB,EAA6B;AACzB;AACA,UAAA,QAAQ,CAAC,QAAT,CAAkB,OAAlB;AACA,UAAA,GAAG,CAAC,OAAJ,GAAc,IAAd;AACA,UAAA,uBAAuB,CAAC,MAAxB,CAA+B,GAA/B;AACH;AACJ;AACJ,KAVD;;AAYA,QAAI,uBAAuB,CAAC,IAAxB,GAA+B,CAAnC,EAAsC;AAClC;AACA;AACA,MAAA,yBAAyB;AAC5B;AACJ;;AAED,SAAO;AACH,IAAA,kBAAkB,EAAlB,UACI,mBADJ,EAEI,QAFJ;AAGI;;;AAGG;AACH,IAAA,qBAPJ,EAOkC;AAE9B,MAAA,mBAAmB,CAAC,OAApB,GAA8B,kBAAkB,CAAC,QAAD,CAAhD;AACA,MAAA,iCAAiC,CAAC,mBAAD,CAAjC;AACA,aAAO,mBAAmB,CAAC,OAA3B;AACH,KAbE;AAcH,IAAA,yBAAyB,EAAA,yBAdtB;AAeH,IAAA,iCAAiC,EAAA,iCAf9B;AAgBH,IAAA,4BAA4B,EAAA;AAhBzB,GAAP;AAkBH","sourceRoot":"","sourcesContent":["var __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n};\r\nimport { CLEANUP_TIMER_LOOP_MILLIS, createTrackingData } from \"./reactionCleanupTrackingCommon\";\r\n/**\r\n * timers, gc-style, uncommitted reaction cleanup\r\n */\r\nexport function createTimerBasedReactionCleanupTracking() {\r\n    /**\r\n     * Reactions created by components that have yet to be fully mounted.\r\n     */\r\n    var uncommittedReactionRefs = new Set();\r\n    /**\r\n     * Latest 'uncommitted reactions' cleanup timer handle.\r\n     */\r\n    var reactionCleanupHandle;\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Only to be used by test functions; do not export outside of mobx-react-lite\r\n     */\r\n    function forceCleanupTimerToRunNowForTests() {\r\n        // This allows us to control the execution of the cleanup timer\r\n        // to force it to run at awkward times in unit tests.\r\n        if (reactionCleanupHandle) {\r\n            clearTimeout(reactionCleanupHandle);\r\n            cleanUncommittedReactions();\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    function resetCleanupScheduleForTests() {\r\n        var e_1, _a;\r\n        if (uncommittedReactionRefs.size > 0) {\r\n            try {\r\n                for (var uncommittedReactionRefs_1 = __values(uncommittedReactionRefs), uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next(); !uncommittedReactionRefs_1_1.done; uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next()) {\r\n                    var ref = uncommittedReactionRefs_1_1.value;\r\n                    var tracking = ref.current;\r\n                    if (tracking) {\r\n                        tracking.reaction.dispose();\r\n                        ref.current = null;\r\n                    }\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (uncommittedReactionRefs_1_1 && !uncommittedReactionRefs_1_1.done && (_a = uncommittedReactionRefs_1.return)) _a.call(uncommittedReactionRefs_1);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n            uncommittedReactionRefs.clear();\r\n        }\r\n        if (reactionCleanupHandle) {\r\n            clearTimeout(reactionCleanupHandle);\r\n            reactionCleanupHandle = undefined;\r\n        }\r\n    }\r\n    function ensureCleanupTimerRunning() {\r\n        if (reactionCleanupHandle === undefined) {\r\n            reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);\r\n        }\r\n    }\r\n    function scheduleCleanupOfReactionIfLeaked(ref) {\r\n        uncommittedReactionRefs.add(ref);\r\n        ensureCleanupTimerRunning();\r\n    }\r\n    function recordReactionAsCommitted(reactionRef) {\r\n        uncommittedReactionRefs.delete(reactionRef);\r\n    }\r\n    /**\r\n     * Run by the cleanup timer to dispose any outstanding reactions\r\n     */\r\n    function cleanUncommittedReactions() {\r\n        reactionCleanupHandle = undefined;\r\n        // Loop through all the candidate leaked reactions; those older\r\n        // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\r\n        var now = Date.now();\r\n        uncommittedReactionRefs.forEach(function (ref) {\r\n            var tracking = ref.current;\r\n            if (tracking) {\r\n                if (now >= tracking.cleanAt) {\r\n                    // It's time to tidy up this leaked reaction.\r\n                    tracking.reaction.dispose();\r\n                    ref.current = null;\r\n                    uncommittedReactionRefs.delete(ref);\r\n                }\r\n            }\r\n        });\r\n        if (uncommittedReactionRefs.size > 0) {\r\n            // We've just finished a round of cleanups but there are still\r\n            // some leak candidates outstanding.\r\n            ensureCleanupTimerRunning();\r\n        }\r\n    }\r\n    return {\r\n        addReactionToTrack: function (reactionTrackingRef, reaction, \r\n        /**\r\n         * On timer based implementation we don't really need this object,\r\n         * but we keep the same api\r\n         */\r\n        objectRetainedByReact) {\r\n            reactionTrackingRef.current = createTrackingData(reaction);\r\n            scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);\r\n            return reactionTrackingRef.current;\r\n        },\r\n        recordReactionAsCommitted: recordReactionAsCommitted,\r\n        forceCleanupTimerToRunNowForTests: forceCleanupTimerToRunNowForTests,\r\n        resetCleanupScheduleForTests: resetCleanupScheduleForTests\r\n    };\r\n}\r\n//# sourceMappingURL=createTimerBasedReactionCleanupTracking.js.map"]},"metadata":{},"sourceType":"module"}